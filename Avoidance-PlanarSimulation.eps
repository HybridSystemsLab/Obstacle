%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Avoidance-PlanarSimulation.pdf
%%Creator: (Adobe Acrobat 20.12.0)
%%For: Ricardo
%%CreationDate: 9/16/20, 9:28 AM
%%BoundingBox: 0 0 560 420
%%HiResBoundingBox: 0 0 560 420
%%CropBox: 0 0 560 420
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1074 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164464, 2020/06/15-10:20:05        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="MATLAB, The Mathworks, Inc. Version 9.7.0.1261785 (R2019b) Update 3. Operating System: Mac OS X"
   xmp:ModifyDate="2020-09-16T09:28:28-07:00"
   xmp:CreateDate="2020-09-16T09:28:28-07:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 20.0 (Macintosh)"
   xmpMM:DocumentID="uuid:9d595434-3eef-6a48-9b66-9fbe7e7e9cec"
   xmpMM:InstanceID="uuid:b7ce850d-4d0f-014b-9797-0bbbb18d5dcb">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/Users/ricardo/svn/books/HybridControl/Matlab/Chapter6/Avoidance/PlanarSimulation.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -420 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 420 li
560 420 li
560 0 li
cp
clp
.06 419.94 mo
560 419.94 li
560 0 li
.06 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
.06 419.94 mo
560 419.94 li
560 0 li
.06 0 li
cp
f
30.088 368 mo
280.912 368 li
280.912 40 li
30.088 40 li
cp
f
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
49.382 368 mo
49.382 40 li
1 /0 /CSD get_res sepcs
.127 sep
@
87.971 368 mo
87.971 40 li
@
126.559 368 mo
126.559 40 li
@
165.147 368 mo
165.147 40 li
@
203.735 368 mo
203.735 40 li
@
242.324 368 mo
242.324 40 li
@
280.912 368 mo
280.912 40 li
@
280.912 367.001 mo
30.088 367.001 li
@
280.912 328.412 mo
30.088 328.412 li
@
280.912 289.824 mo
30.088 289.824 li
@
280.912 251.236 mo
30.088 251.236 li
@
280.912 212.648 mo
30.088 212.648 li
@
280.912 174.06 mo
30.088 174.06 li
@
280.912 135.471 mo
30.088 135.471 li
@
280.912 96.883 mo
30.088 96.883 li
@
280.912 58.295 mo
30.088 58.295 li
@
2 lc
30.088 368 mo
280.912 368 li
1 /0 /CSD get_res sepcs
.851 sep
@
30.088 40 mo
280.912 40 li
@
49.382 368 mo
49.382 364.72 li
@
87.971 368 mo
87.971 364.72 li
@
126.559 368 mo
126.559 364.72 li
@
165.147 368 mo
165.147 364.72 li
@
203.735 368 mo
203.735 364.72 li
@
242.324 368 mo
242.324 364.72 li
@
280.912 368 mo
280.912 364.72 li
@
49.382 40 mo
49.382 43.28 li
@
87.971 40 mo
87.971 43.28 li
@
126.559 40 mo
126.559 43.28 li
@
165.147 40 mo
165.147 43.28 li
@
203.735 40 mo
203.735 43.28 li
@
242.324 40 mo
242.324 43.28 li
@
280.912 40 mo
280.912 43.28 li
@
%ADOBeginSubsetFont: BBAAAA+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /BBAAAA+Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f321047244e000000cc000000606376
7420982241db0000012c0000038c6670676d52c5ad27000004b800000b90
676c7966b110bdd900005d580000077c686561649b207bba000010480000
0036686865610a220fe40000108000000024686d747845be3289000010a4
000023306c6f6361004134f8000033d4000023346d61787011400c7d0000
5708000000206e616d653bc20d3800005728000001be70726570c412718a
000058e80000046e67646972000000000000000000000000000303880190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a002a0093007600a000ac00b800ab00c50000002bfe55001a
042f002105be002740292a292827262524232221201f1e1d1c1b1a191817
161514131211100d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b000
43617d6818b0004360442d2c45b01a234445b01923442d2c2045b0032545
6164b050515845441b2121592d2c20b0032552582359212d2c69b04061b0
008b0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0
112bb0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb01745
8cb0172344b0177ae5182d2cb002254661658a46b040608b482d2cb00225
46608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b003
2545b019236a4445b01a23444565234520b00325606a20b009234223688a
6a606120b0005258b21a401a4523614459b0005058b21940194523614459
2d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7
830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c456920b00943b0022660b00325b00525
4961b0805358b21940194523616844b21a401a4523606a44b209191a4565
2345604259b00943608a103a2d2c01b005251023208af500b0016023edec
2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d
2c20b001600110203c003c2d2c20b001610110203c003c2d2c764520b003
254523616818236860442d2c7645b00325452361682318456860442d2c76
45b0032545616823452361442d2c4569b014b0324b505821b0205961442d
b8002b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e
2db8002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046
b003254652582359208a208a49648a204620686164b00425462068616452
5823658a592f20b00053586920b000545821b040591b6920b000545821b0
406559593a2db8002f2c2046b00425465258238a592046206a6164b00425
46206a61645258238a592ffd2db800302c4b20b0032650585158b080441b
b04044591b21212045b0c05058b0c0441b2159592db800312c2020456944
b001602020457d691844b001602db800322cb800312a2db800332c4b20b0
03265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a
235920b80003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db800342c4b535845441b2121592db800352c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800362c20
20456944b001602db800372cb800362a212db800382c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800392c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db8003b2c2020456944b00160202045
7d691844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db800402c2020456944b001
602db800412cb800402a212db800422c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db800432c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db800442c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db800452c2020456944b001602020457d691844b001
602db800462cb800452a2db800472c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
482c4b535845441b2121592db800492c4bb800095058b101018e59b801ff
85b800441db9000900035f5e2db8004a2c2020456944b001602db8004b2c
b8004a2a212db8004c2c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db8004d2c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db8004f2c2020456944b001602020457d691844b001602db800502c
b8004f2a2db800512c4b20b003265358b0801bb040598a8a20b003265358
2321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b003
2653582321b801408a8a1b8a235920b80003265358b0032545b801805058
2321b8018023211bb003254523212321591b2159442db800522c4b535845
441b2121592db800532c4bb800095058b101018e59b801ff85b800441db9
000900035f5e2db800542c2020456944b001602db800552cb800542a212d
b800562c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db800572c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800582c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80059
2c2020456944b001602020457d691844b001602db8005a2cb800592a2db8
005b2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a
1b8a235920b0032653582321b800c08a8a1b8a235920b0032653582321b8
01008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8000326
5358b0032545b8018050582321b8018023211bb003254523212321591b21
59442db8005c2c4b535845441b2121592db8005d2c4bb800095058b10101
8e59b801ff85b800441db9000900035f5e2db8005e2c2020456944b00160
2db8005f2cb8005e2a212db800602c2046b003254652582359208a208a49
648a204620686164b004254620686164525823658a592f20b00053586920
b000545821b040591b6920b000545821b0406559593a2db800612c2046b0
0425465258238a592046206a6164b0042546206a61645258238a592ffd2d
b800622c4b20b0032650585158b080441bb04044591b21212045b0c05058
b0c0441b2159592db800632c2020456944b001602020457d691844b00160
2db800642cb800632a2db800652c4b20b003265358b0401bb000598a8a20
b0032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a
235920b0032653582321b801008a8a1b8a235920b0032653582321b80140
8a8a1b8a235920b80003265358b0032545b8018050582321b8018023211b
b003254523212321591b2159442db800662c4b535845441b2121592d0001
00000000000088954b825f0f3cf500110800000000005f4d8f0000000000
d8b9a29bf865fc270b9108f9000000090001000100000000000100000629
fe2900000c01f865fced0b910001000000000000000000000000000008cc
05120042000000000239000002390000023900ed02d70052047300000473
0040071d0042055600590187009c02aa008e02aa0044031d004e04ac005c
023900aa02aa0055023900af0239000004730040047300c4047300400473
003104730034047300420473004d0473004b0473004204730049023900e3
023900e304ac001c04ac005c04ac001c0473009c081f00e10556001e0556
009705c7005a05c700a5055600af04e300af0639006305c700a1023900c9
040000230556009c0473009c06aa009705c7009c06390050055600af0639
005005c700b40556006004e3002105c700aa05560034078d00250556002a
0556002a04e3002f023900800239ffbb0239002f03c100780473000002aa
002604730052047300760400003b04730038047300480239001c0473003d
0473008401c7008401c7ffda0400008001c7008906aa0084047300840473
003b047300760473003c02aa00890400004202390017047300800400000b
05c700120400000b040000150400003402acffd50214009002ac002a04ac
00120556001e0556001e05c7005a055600af05c7009c0639005005c700aa
0473005204730052047300520473005204730052047300520400003b0473
004804730048047300480473004802390067023900080239000002390025
047300840473003b0473003b0473003b0473003b0473003b047300800473
00800473008004730080047300500333006f04730068047300380473004b
02cd0095044cfff504e300c705e5001505e50012080000ed02aa008a02aa
00520464005c080000100639004205b4002a0464005c0464005a0464005c
0473ffe1049cffb403f4006a05b400280696001c0464002f0231ff7902f6
003b02ec00310625005e071d004904e3005c04e300ba02aa00e804ac005c
0464ffef047300280464005c04e50071047300c2047300c2080000ed0239
00000556001e0556001e0639005008000049078d00470473fffb080000f1
02aa004e02aa004e01c7008401c700aa0464005c03f40042040000150556
002a0156feaa05f4006002aa00b402aa00aa0400001c0400001c04730050
0239009701c700aa02aa004e0800000e0556001e055600af0556001e0556
00af055600af0239006b0239fff902390020023900020639005006390050
065200690639005005c700aa05c700aa05c700aa023900bd02aa002a02aa
fff702aa001502aa001902aa00f702aa008402aa007902aaffff02aa00a1
02aa002a0473ffe801c7ffd7055600600400004204e3002f040000340214
009005c700210473003d0556002a04000015055600800473008004ac005c
04ac007402aa005702aa000b02aa000706ac005a06ac00a306ac004b0473
0000063900630473003d023900c9055600600400004205c7005a0400003b
05c7005a0400003b047300380556001e047300520556001e047300520556
001e0473005205c7005a0400003b05c7005a0400003b05c700a505480038
055600af04730048055600af04730048055600af04730048055600af0473
0048055600af04730048063900630473003d063900630473003d06390063
0473003d0473003d05c700a10473008405c700350473003e038f00690371
004403330059031f00650239003501c7ffdf063900c9038e008404000023
01c7ffa3055600320400fff10473009c021f00830473009c01c7000c0473
009c021a004e0473009c027b008905c7009c0473008405c7002a0473000a
05c7009c047300840473000e063900500473003b063900500473003b0639
00500473003b05c700b402aa008905c7004902aa001705c700b402aa0042
0556006004000042055600600400004204e300210239001704e3002102e1
001704e30021028fffe205c700aa0473008005c700aa0473008005c700aa
0473008005c700aa0473008005c700aa0473008005c700aa04730080078d
002505c700120556002a0400001504e3002f0400003404e3002f04000034
055600600400004204e30021023900170473004b0000fcfc0000fcfc0000
fc9c0000fc680000fc860000fc8a0000fd690000fcc40000fcf60000fc70
0000fc9c0000fd5b0000fcea0000fd120000fc9105c70021063900630473
003d0473009c01c700890556009c0400008005c7009c0473008405c700b4
02aa008901aaffdb023700e102aa005501c7ffda040000800239001c0473
0048047300480400003a047300510000fd3c0000fc660000fc8a0239fffb
0239fffb05c7009c047300840000fcc4056d0024054c0098055600980427
0098059c00250556009807f0000a0554004505c7009805c7009805560098
057e002506aa009805c700980639005005c700980556009805c7005004e3
001d0556002f06d800410556002505db009805360060078d009807a10098
06aa001d070900980536009805c700640800009805b7006a047300560473
0048046200870339008704d9001c04730050063d00170400003304ab0087
04ab0087046200870498001b055400870473008704730048047300870473
007d04000048040000330400001706a800460400001404910087044e005c
063900870657008704e3001b05c7008703ff00870414002f063900870477
005005560098047300500427009803390087023900ba01c7008704000023
05c70050040000480239001d020300290800002506c3001b07e10098067c
008701c7ffdd055600620639004e0473001b055600980462008704000048
0617001b0473001b0556002f0400001705c700980473008704730098031d
00870000fd5b0000fd5b0000fd5b0000fd5b0000fc700000fd930000fd2a
0000fc8a0000fcfc0000fcfc0000fc860000fd690000fcc40000fcf60000
fd930000fc9c0000fc9c0000fc8a0000fc8a0000fc680000fc860000fc66
0000fc680000fc860000fc660000fc660000fd500000fc660000fd5b0000
fc8a0000fc8d0000fd2a000000000239001b0473008306aa008302aa0088
06aa008302aa008902aa0088042b0052042b005302020087033afffd0239
0017023900170400000a05c70011040000140473009c0473009d0473009c
0400008004b2003904b2003905c7005905c7002104890049055600af0556
0060040000420498003906e600aa05950080060a0052021400b6037300b6
023900c3048c002b0400003b0134005102aa00c102aa00c20b06000e0556
00ed029600ed02aa004e01c700aa02aa0055044cfff5042f00c1042f00c2
056500c1056500c202aa0055029600ed02aa0055080000f102d500a4011d
000000000000000000000000000000000000000000000000000000000000
023900000239000002390000023900000239000002390000023900000239
0000023900000000000000000000000000000000000000000000011d0000
008f000002aafff7037000b60473009c02aa005502aa0006044c0072044c
00730556001e04e300ae04730048071c00500568003b0000fd5e0000fd5e
0000fd5e0000fd5e0000fcc90000fcd20000fd980000fccd0000fcef0000
fce10000fcd90000fcec0000fc5e0000fd440000fd4a0000fccf0000fcd1
0000fc860000fc910000fcc10000fcc10000fcc10000fcc20000fcc20000
fc8a01550061027b00610155006101550061046400320464002b03f4002d
03f4002f05b4011305b400280231006b0231fe830464ff330464ffef0464
002b0464002d08fa006f0816006f0556009c023900c9047200c906ab00c9
078f00c905560034078f003409c800340c010034078f00c90556002a078f
002a09c8002a0473009c05c7005a05c700a506aa009701c70084038e0084
0555008405c700840400000b05c7000b078e000b0955000b05c700840400
000b05c7000b078e000b01c700890400003b0473003806aa008409e20074
08c1004f07db003807da006b05a7007102f7005808e7007106f0006b05a1
00530556001e047300520239001e0239ffff063900500473003b05c700aa
0473008005c700aa0473008005c700aa0473008005c700aa0473008005c7
00aa047300800556001e047300520556001e0473005208000010071d0049
063900630473003d0556009c04000080063900500473003b063900500473
003b01c7ffbe09cd005408fc006f07fb00380639006305c7009c04730084
0556001e0473005208000010071d00490639004204e3005c0556001e0473
00520556001e04730052055600af04730048055600af047300480239ff71
01c7ff350239fff801c7ffaa063900500473003b063900500473003b05c7
00b402aaffd605c700b402aa004f05c700aa0473008005c700aa04730080
05c700a1047300840556001e04730052055600af04730048063900500473
003b063900500473003b063900500473003b063900500473003b0556002a
0400001502aa004e023900c90556001e0473005205560097047300760556
009704730076055600970473007605c7005a0400003b05c700a504730038
05c700a50473003805c700a50473003805c700a50473003805c700a50473
0038055600af04730048055600af04730048055600af04730048055600af
04730048055600af0473004804e300af0239001c063900630473003d05c7
00a10473008405c700a10473008405c700a10473008405c700390473001b
05c700a1047300840239ffec01c7ff9e02390027023900160556009c0400
00800556009c040000800556009c040000800473009c01c700890473009c
01c7ff9d0473009c01c7ffb50473009c01c7ffc006aa009706aa008406aa
009706aa008406aa009706aa008405c7009c0473008405c7009c04730084
05c7009c0473008405c7009c04730084063900500473003b063900500473
003b063900500473003b063900500473003b055600af04730076055600af
0473007605c700b402aa008905c700b402aa008305c700b402aa004a05c7
00b402aa0018055600600400004205560060040000420556006004000042
0556006004000042055600600400004204e300210239001704e300210239
001704e300210239ffe204e300210239ffe705c700aa0473008005c700aa
0473008005c700aa0473008005c700aa0473008005c700aa047300800556
00340400000b055600340400000b078d002505c70012078d002505c70012
078d002505c70012078d002505c70012078d002505c700120556002a0400
000b0556002a0400000b0556002a0400001504e3002f0400003404e3002f
0400003404e3002f04000034047300840239001005c70012040000150239
001c0556001e047300520556001e047300520556001e047300520556001e
0473ffcb0556001e047300520556001e047300520556001e047300520556
001e047300520556001e047300520556001e047300520556001e04730052
0556001e04730052055600af04730048055600af04730048055600af0473
0048055600af047300480556008c0473fff0055600af04730048055600af
04730048055600af04730048023900ae02390099023900c701c700840639
00500473003b063900500473003b063900500473003b063900500473ffd8
063900500473003b063900500473003b063900500473003b071c00500568
003b071c00500568003b071c00500568003b071c00500568003b071c0050
0568003b05c700aa0473008005c700aa0473008006e600aa0595008006e6
00aa0595008006e600aa0595008006e600aa0595008006e600aa05950080
0556002a040000150556002a040000150556002a040000150556002a0400
0015055600af04730048055600af04730048056d007505df009604860052
048600870723000a05890017056d002404860043056d002404860043056d
00750486005208d9001006dd0012054f0043040a003005df009604860087
05df009604860087065500500486005205df006004120037056d00100412
0019056d001004120019056d00100412001905ac005e047a006907480098
0600008d08000010071d004906aa009706aa008405c700b402aa004c0222
ffc50556001b05c700c504e300d505c70029055600c504e3004805c700b0
06390071023900ba055600b00556002f071d00be05c700b004e300620639
007105c700b0055600c504e3005804e1002f0556002905c700500558003d
06a8007f063900640239000a0556002904e3005a04e300b40473001204e3
006804730077038d004a04e3003b04e5008f023900b0047300b004730025
04e300b8047300420400007104e3006f04e300aa0473004c04e3006f0400
003b04e300b805c700770473000e05c7008f0610006a0239000a04e300b8
0239009a0222000b0000fd19023900b0016c0088016c00880000fcfc0000
fcfc016c008802ca001a02b5001a03050088031200880222002e0222002f
031e00880362006f033300880362006f0735007f0625005e0639ffef01c7
008401c700aa047200ed06ac009c06ac00ed04730048047300480556001e
0473005204730052055600af04730048055600af04730048055600af0473
00480239fff00239ffdb01c70079063900500473003b063900500473003b
063900500473003b055600600400004205c700aa047300800400000b06e6
00aa05950080060200610473ffd605c7fff20473008406aa008403f0009c
0460009a03a6005a03e9000c02cf00020448005c06020061047300500655
004e0486004c0639005002aa001e07c6002407c6002408e6ffca0000f920
0000fa0b0000fa0b0000fa060000fa0606020061047300500655004e0486
004c0222002f02b5001a0473002504e3002f040000340473003b04d20084
04dc00380473007204bd003804d7003d0473008204d7008202220086078d
00470387008802aa008604d2003c04b80032052b00320772003805600017
043a001705ce001c04c2008904b8008901a9008a01a9008a01c700aa0187
007802aa000802aa00c102aa003a0187007802aa000802aa00c102aa003a
01a9008a01a9008a02aa001e02aafff7023a0042023a004100e4ffed0155
00450155004401c4004402e400090200000b023a004e023a004f0256000e
0256000e025600240256002402aa00550256002e0256002e0256002e0200
00210200000600e300440256003a023a000902560024025600240256000e
0256000e02aa0078023a004f0000fccd0000fca20000fca20000fd6f0000
fd6f0000fc490000fc490000fb9e0000fca20000fc490000fccd0000fcc2
0000fcc20000000002390000000000000000000000000000031d004e031d
004e06da00c107c60024023900e308e6009c07c60024071d00d00703001b
023900800239008000000000000000000000000000000000000000000000
0000067b003a023a00200239001a02390021023a002702390025023a0021
023900240256002e0155002b0256002e0155004701550022023a0042023a
0020023a006202390020023900180239001a02390021023a002702390025
023a0021023900240256002e0155002b0256002e0155004701550022063c
0011063900630473009c0473009c0556002a06ab00280600003007560011
0473007207c8005806ac005a05c7005a0556005904e500710696001c06ab
003406ab0028055600af04730076055600af0473007604e3000206390050
04c400a1024100230369001105c7005002bb0023033afffd0473009c0473
009c01c7002a01c7002a0473003d04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a05c1005b05b3005b076c00880776
008807760088078d008807ca006f07a0006f047300770473007704730077
04730077047300770473007706c2008806c200880874008808890088085b
00880868008804e3003b04e3003b04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b073300880733008808e5008808fa008808cc008808d9
00880929006f0929006f023900b0023900b002390041023900390239003d
0239003d023900230239002303a5008803a5008805570088056c0088053e
0088054b0088059b006f059b006f04e3006f04e3006f04e3006f04e3006f
04e3006f04e3006f07a5008807a5008809570088096c0088093e0088094b
008804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b806c20088088900880868008808b8006f0610006a0610006a0610
006a0610006a0610006a0610006a0610006a0610006a0791008807910088
0943008809580088092a0088093700880987006f0987006f04e3005a04e3
005a047300770473007704e3003b04e3003b023900b0023900b004e3006f
04e3006f04e300b804e300b80610006a0610006a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a0811005b080c005b
0991008809d80088097f0088099b008809d3006f09ce006f04e3003b04e3
003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b096c0088
096c00880b1e00880b3300880b0500880b1200880b62006f0b62006f0610
006a0610006a0610006a0610006a0610006a0610006a0610006a0610006a
09ca008809ca00880b7c00880b9100880b6300880b7000880bc0006f0bc0
006f04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
0556001b0556001b0666002e0661002f07a9001b04e3003b04e3003b04e3
003b04e3003b04e3003b06ac002e06a7002f06d2002e06ba002f083100b0
0239ffcf0239ffce0239ffcc0239ffda0239ffdc0239ffc50239ffe10239
ffee0343002e0348002f04e300b804e300b804e300b804e300b804e300aa
04e300aa04e300b804e300b8055600290556002906b1002e0713002f06c2
00880610006a0610006a0610006a0610006a0610006a075a002e0789002f
0792002e07a9002f0878005e04e3005a0473007704e3003b023900b004e3
006f04e300b80610006a05d5007206a7002f06ba002f0348002f0789002f
0713002f07a9002f0239ffcb04e300b804ac002504ea011704f700a102f3
001b02bb00230473002504e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a0239ffd70239ffe40239ffd20239ffd7
0239ffdb0239ffdb0239ffcd0239ffe00239ffc80239ffc30239ffdc0239
ffdc0239ffd70239ffd70239ffd20239ffcd0239ffd20239ffd704e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b80666002e0661002f05c1005b076c00880776008805b3
005b07760088078d00880666002e0661002f05c1005b076c008807760088
05b3005b07760088078d00880343002e0348002f0348002f03a500880557
0088053e008803a50088056c0088054b00880343002e0348002f0348002f
03a5008805570088053e008803a50088056c0088054b008806b1002e0713
002f0713002f06c20088088900880868008806c200880889008808680088
06b1002e0713002f0713002f06c20088088900880868008806c200880889
00880868008805c700b405c7005a0639005001c70020051d0029055600af
05c700a10000fd31055200680473003806390050047300480772005b0738
004505e5001306ac003d06ac003d06ac003a06ac003a066d001d04e3001b
082200d005e1008a06a8007f05c7008f0556001e0400000b079900d005cf
008a04da003802ca002405d900160588003805c700b404730052031f0000
04da00a103eb00a1064900a104cf00840556009c0400008004e3002f0400
003408d9001406dd0030054f0072040a0047056d00a50412007a05df00ac
0486009105df00630412003f04f8002b0412003a056d002e0412002405ac
00ac047a007705ac00ac047a00770556002a0556002a04d900bc037c0091
05ac00ac047a0077063200a504df007a075f00ac059b00910556002a0556
002a06fe0028054e00350748003a059400260748003a0594002607720048
05b3003805df00ac0486009104730052054f00ac054f00ac06a8007f04dc
005d0855004405e0002605560025040000040556003404b6000b0400003b
054f0072040a004705f10026049c0024023900bd056d002e041200240556
00340556001e05c7005a0400003b0473ffe804e3002101c7003e02bb0023
04e30021055600af0473009c0473009c055600af047300480456002301c7
ffda05c700aa01a9002101a9002102aa003302aa003302aa003a02aaffe9
023900e302aa003c02aa003c057f005b04ac002504ac0074023900e304ac
0025057c004c04ac0074023900e3023900e3063900710412003f0412003f
055600ae0473008005c7005a06aa009705dd0097059b004605c7005a05c7
005a05c7005a0400003b0400003b0400003b0473003805ca003006c6002e
063f002f031f001a062e001904e900310488004502aa00be02aa00be02aa
00be02aa00be0277003b0277003b034b0000034b0000034b0000034b0000
034b00000487001203f7001e045e0054043600830436008302fd005d034f
0012069900390655003e052900300000f86506e1002204e9002001e0004b
01e9004b015d0025015d000a0199002a0198001202fb0017030400170267
0013025700120257001202c8004b01d8000701d8000707e9003a097c004b
0931004909310002013c004b04570022058900050589000d04be00150442
001801d8000701d8000703fe003d03fe003d0404003a036f000b0467003c
0000fb760000fcc10000fc080000fc730000fc730000fa630000fce00000
fe950000fc8e0000fc510000fa0b0000fc9f046500360465002204010034
0401002407760017044c001b03ea001d051a00340653003204c8003306c2
008808890088086800880556001b0556001b0239ffdf0239ffe105560029
055600290404001505e5001405e5001405e500140800ffeb0800ffeb0800
03b40800038c080003b40800038c0800ffe90800ffe9080003b40800038c
0800ffe90800ffe9080000000404001500e40042023a0029023a0024023a
001e02000006023a002405c7005a0639006305c7005a0471002205520029
04e300210556001e04d0002805c2004e04d9004e05c7005a06aa008405d0
003106640037082d00350552006805520068039c003f0380003b039c003f
0380003b039c00530381003c039c00530381003c02eb005302e3005302e3
005302e3005302eb005302eb000802e3000002e3000002e3000002eb0008
0363005303630053036300530363005303630053027f00010330004503b2
002603c3000b050b0031069c00290390007f0000fc4f0000fc4f0000fc42
0000fc420000fc420000fc420000fc010000fc010000fd44046500220401
00240a3900500873003b0436008304360083043600830329003a0329003a
03550028050d00340329005403290028032900330329003302f6003a02f6
003a0329002b0143005e02d7005b04bb005e0329005e0329002a02d70029
032900270329002a03290054019400100329005b0373003704bb005e02d7
0008037800800329000d0378004a04dc004d0632002a04be003304730039
0473003b04e6003804e1003a04fa0039076e003e0329000a0143005e01e4
00610329005b02d70008037800800329000d037800790329000a042b0052
05c5001001c70084045e0054070a002e06cb003504d6001b04fa001a02d8
000d04e9001b0330000d02d9000a02db000c01c700aa02aa004e01c700aa
02aa004e01c700aa02aa004e01c700aa02aa004e053d007a0708003b0310
008f0574009708c000220473004002e00034047300400473003104730034
047300420473004d0430002b047300420473004903cc000903cc000903cc
0009042800580425004e048d00560437003d06a600560450004804460048
04f8001f06c70056044e0056042d003d07c7005a049c0056049e007505e3
00560446003f0475005205e9005c046a0075054e00560475003106660056
0448003b05e300560468005604a400560487007504b40058049a005604a4
007504d1003d049a007504250044043d003d04be0056043d004e0458004e
0458004e04ba005605df0056044c00aa04d500b10473005e0473002f0425
00330473007b0437003d04250056049e0050048b003d04b8005604b80056
072b005204a20048048f004804db001f074c007104c10071047d003d085c
005604dd005604dd007b06a20071046f003d04b4004e0619005604ba0085
05d5005604ee0056068b004804a80048063f005204cd005604dd005604c3
007b053b005604e7005604e70085051d005604e70085049600480493003d
0521004e04c50056049300480491004804e7005606060056049c004804c3
007b049c004804ae00560527004c02f6007b044e0056048d005604c50056
05ae005605ee006f000000000000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c000000a8000000e8000000e80000
01c4000002100000032800000328000003c4000004ec0000061800000618
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0001000008cc006f0009
006b00070002001000100067000007e80b90000400010000000a007e0001
000000000000005000000001000000000003001000500001000000000004
001000600001000000000006001000700001000000000007003200800003
000104090001002000b20003000104090002000e00d20003000104090003
002000e0000300010409000400200100000300010409000600200120a920
313939302d32303036204170706c6520436f6d707574657220496e632e20
a92031393831204c696e6f7479706520414720a920313939302d39312054
79706520536f6c7574696f6e7320496e632e41414248494d2b48656c7665
7469636141414248494d2b48656c76657469636141414248494d2b48656c
76657469636148656c766574696361206973206120726567697374657265
642074726164656d61726b206f66204c696e6f7479706520414700410041
004200480049004d002b00480065006c0076006500740069006300610052
006500670075006c0061007200410041004200480049004d002b00480065
006c00760065007400690063006100410041004200480049004d002b0048
0065006c00760065007400690063006100410041004200480049004d002b
00480065006c0076006500740069006300610000b8005d2b01ba000501b9
005f2b01bf01bb003e00340029001d0012000000652bbf01bc0042003400
29001d0012000000652bbf01bd003a00340029001d0012000000652b00bf
01b7004d003d003700280012000000652bbf01b80060004f00370028001b
000000652bbf01b90047003d0029001d0012000000652bbf01ba00420034
0029001d0012000000652b00ba01be000400642bb801b620457d691844b8
00532bb800492bb8003f2bb800352bb8002b2b4118008001a6009001a600
a001a600030069018b0079018b0089018b0099018b00040089018b009901
8b00a9018b00b9018bb2040840ba0179001a014a400b041f5414191f180a
0b1fd2b80106b49e1fd918e3bb0119000d00e10119b20d0009410a01a001
9f0064001f01a50025017a00480028019ab3296c1f60410a01a9007001a9
008001a90003008001a9000101a9b21e321fbe012c00250401001f012600
1e0401b61fe7312d1fe531b80201b21fc227b80401b21fc11eb80201400f
1fc01d9e1fbf1d671fbe1d671fab27b80401b21faa29b80401b61fa91d6c
1f931eb8019ab21f921db80101b21f911db80101b21f751db80201b61f6d
29961f6431b8019ab21f4c96b802abb21f391db80156400b1f3638211f35
1de41f2f27b80801400b1f2d1d4c1f2a31cd1f241db802abb21f201eb801
2540111f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa019b002a019bb2
254a1fba019b0025017ab349293896b8017bb348283125b8017a40364828
9629482725294c1f252946272729482756c80784075b07410732072b0728
07260721071b071408120810080e080c080a08080807b801acb23f1f06bb
01ab003f001f01abb308060805b801aeb23f1f04bb01ad003f001f01adb7
0804080208000814b8ffe0b40000010014b801abb41000000100b801abb6
06100000010006b801adb300000100b801ad401f04000001000410000001
001002000001000200000001000002010802004a00b0018db80600851676
3f183f123e113946443e113946443e113946443e113946443e113946443e
11394660443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b53
58b0ff1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b2b4b5279b3
76706a66456523456023456560234560b08b766818b080622020b16a7045
65234520b003266062636820b003266165b070236544b06a234420b17666
4565234520b003266062636820b003266165b066236544b0762344b10066
455458b166406544b27640764523614459b36242725d4565234560234565
60234560b089766818b080622020b172424565234520b003266062636820
b003266165b042236544b072234420b1625d4565234520b0032660626368
20b003266165b05d236544b0622344b1005d455458b15d406544b2624062
45236144592b2b2b2b456953427374b8019a2045694b20b02853b049515a
58b020615944b801a62045694475000000>
[1917 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 108 16 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>BBAAAA+Helvetica AddT42Char 
1 232 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>BBAAAA+Helvetica AddT42Char 
1 452 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>BBAAAA+Helvetica AddT42Char 
1 528 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>BBAAAA+Helvetica AddT42Char 
1 808 23 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>BBAAAA+Helvetica AddT42Char 
1 1260 25 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>BBAAAA+Helvetica AddT42Char 
1 1560 27 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>BBAAAA+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>BBAAAA+Helvetica AddT42Char 
BBAAAA+Helvetica /CharStrings get begin
/hyphen 16 def
/zero 19 def
/one 20 def
/two 21 def
/four 23 def
/six 25 def
/eight 27 def
end
BBAAAA+Helvetica /Encoding get
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
pop
end
%ADOEndSubsetFont
/EIYIBR+Helvetica /BBAAAA+Helvetica findfont ct_VMDictPut/EIYIBR+Helvetica*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]EIYIBR+Helvetica nfEIYIBR+Helvetica*1 [10 0 0 -10 0 0 ]msf41.3824 382 mo(-10-8-6-4-202)[3.32993 5.56 32.695 3.32993 35.257 3.32993 35.257 3.32993 35.257 3.32994 37.257 38.587 0 ]xsh149.361 399.627 mo
149.278 399.627 149.236 399.575 149.236 399.471 cv
149.236 399.419 149.246 399.383 149.267 399.362 cv
149.559 398.862 149.905 398.388 150.306 397.94 cv
150.707 397.492 151.166 397.036 151.681 396.573 cv
152.197 396.109 152.713 395.645 153.228 395.182 cv
153.743 394.719 154.163 394.31 154.486 393.956 cv
154.423 393.956 li
154.194 393.956 153.853 393.88 153.4 393.729 cv
152.947 393.578 152.59 393.502 152.33 393.502 cv
152.049 393.502 151.775 393.562 151.509 393.682 cv
151.244 393.802 151.074 393.992 151.001 394.252 cv
150.98 394.325 150.939 394.362 150.876 394.362 cv
150.673 394.362 li
150.59 394.362 150.548 394.31 150.548 394.206 cv
150.548 394.159 li
150.631 393.846 150.769 393.555 150.962 393.284 cv
151.155 393.013 151.389 392.791 151.666 392.62 cv
151.942 392.448 152.231 392.362 152.533 392.362 cv
152.752 392.362 152.931 392.411 153.072 392.51 cv
153.213 392.609 153.377 392.76 153.564 392.963 cv
153.751 393.166 153.902 393.312 154.017 393.401 cv
154.132 393.49 154.278 393.534 154.455 393.534 cv
154.694 393.534 154.905 393.427 155.087 393.213 cv
155.27 393 155.455 392.732 155.642 392.409 cv
155.673 392.378 155.71 392.362 155.751 392.362 cv
155.939 392.362 li
155.98 392.362 156.012 392.375 156.033 392.401 cv
156.054 392.427 156.064 392.461 156.064 392.502 cv
156.064 392.544 156.054 392.581 156.033 392.612 cv
155.752 393.101 155.418 393.562 155.033 393.995 cv
154.648 394.427 154.148 394.919 153.533 395.471 cv
152.918 396.023 152.397 396.492 151.97 396.877 cv
151.543 397.263 151.148 397.659 150.783 398.065 cv
150.866 398.044 150.976 398.034 151.111 398.034 cv
151.371 398.034 151.728 398.107 152.181 398.252 cv
152.634 398.398 152.981 398.471 153.22 398.471 cv
153.491 398.471 153.762 398.414 154.033 398.299 cv
154.304 398.184 154.538 398.023 154.736 397.815 cv
154.934 397.606 155.064 397.367 155.126 397.096 cv
155.157 397.023 155.199 396.987 155.251 396.987 cv
155.455 396.987 li
155.496 396.987 155.53 397.005 155.556 397.042 cv
155.582 397.078 155.595 397.112 155.595 397.143 cv
155.595 397.154 155.59 397.169 155.58 397.19 cv
155.475 397.596 155.301 397.984 155.056 398.354 cv
154.811 398.724 154.512 399.029 154.158 399.268 cv
153.803 399.507 153.423 399.627 153.017 399.627 cv
152.809 399.627 152.635 399.578 152.494 399.479 cv
152.353 399.38 152.189 399.229 152.001 399.026 cv
151.814 398.823 151.66 398.674 151.541 398.581 cv
151.421 398.487 151.272 398.44 151.095 398.44 cv
150.564 398.44 150.09 398.815 149.673 399.565 cv
149.632 399.606 149.595 399.627 149.564 399.627 cv
149.361 399.627 li
f
157.036 401.84 mo
157.036 401.449 li
157.953 401.449 158.411 401.335 158.411 401.106 cv
158.411 395.324 li
158.036 395.512 157.557 395.606 156.974 395.606 cv
156.974 395.215 li
157.869 395.215 158.546 394.981 159.005 394.512 cv
159.161 394.512 li
159.192 394.512 159.218 394.522 159.239 394.543 cv
159.26 394.564 159.27 394.585 159.27 394.606 cv
159.27 401.106 li
159.27 401.335 159.728 401.449 160.645 401.449 cv
160.645 401.84 li
157.036 401.84 li
f
30.088 368 mo
30.088 40 li
@
280.912 368 mo
280.912 40 li
@
30.088 367.001 mo
33.368 367.001 li
@
30.088 328.412 mo
33.368 328.412 li
@
30.088 289.824 mo
33.368 289.824 li
@
30.088 251.236 mo
33.368 251.236 li
@
30.088 212.648 mo
33.368 212.648 li
@
30.088 174.06 mo
33.368 174.06 li
@
30.088 135.471 mo
33.368 135.471 li
@
30.088 96.883 mo
33.368 96.883 li
@
30.088 58.295 mo
33.368 58.295 li
@
280.912 367.001 mo
277.632 367.001 li
@
280.912 328.412 mo
277.632 328.412 li
@
280.912 289.824 mo
277.632 289.824 li
@
280.912 251.236 mo
277.632 251.236 li
@
280.912 212.648 mo
277.632 212.648 li
@
280.912 174.06 mo
277.632 174.06 li
@
280.912 135.471 mo
277.632 135.471 li
@
280.912 96.883 mo
277.632 96.883 li
@
280.912 58.295 mo
277.632 58.295 li
@
EIYIBR+Helvetica*1 [10 0 0 -10 0 0 ]msf16.0882 370.501 mo(-6)[3.32993 0 ]xsh16.0882 331.911 mo(-4)[3.32993 0 ]xsh16.0882 293.321 mo(-2)[3.32993 0 ]xsh20.0882 254.731 mo(0)sh20.0882 216.141 mo(2)sh20.0882 177.551 mo(4)sh20.0882 138.961 mo(6)sh20.0882 100.371 mo(8)sh14.0882 61.7807 mo(10)[5.56 0 ]xsh4.9492 198.427 mo
4.8662 198.427 4.8242 198.375 4.8242 198.271 cv
4.8242 198.219 4.8342 198.183 4.8552 198.162 cv
5.1472 197.662 5.4932 197.188 5.8942 196.74 cv
6.2952 196.292 6.7542 195.836 7.2692 195.373 cv
7.7852 194.909 8.3012 194.445 8.8162 193.982 cv
9.3312 193.519 9.7512 193.11 10.0742 192.756 cv
10.0112 192.756 li
9.7822 192.756 9.4412 192.68 8.9882 192.529 cv
8.5352 192.378 8.1782 192.302 7.9182 192.302 cv
7.6372 192.302 7.3632 192.362 7.0972 192.482 cv
6.8322 192.602 6.6622 192.792 6.5892 193.052 cv
6.5682 193.125 6.5272 193.162 6.4642 193.162 cv
6.2612 193.162 li
6.1782 193.162 6.1362 193.11 6.1362 193.006 cv
6.1362 192.959 li
6.2192 192.646 6.3572 192.355 6.5502 192.084 cv
6.7432 191.813 6.9772 191.591 7.2542 191.42 cv
7.5302 191.248 7.8192 191.162 8.1212 191.162 cv
8.3402 191.162 8.5192 191.211 8.6602 191.31 cv
8.8012 191.409 8.9652 191.56 9.1522 191.763 cv
9.3392 191.966 9.4902 192.112 9.6052 192.201 cv
9.7202 192.29 9.8662 192.334 10.0432 192.334 cv
10.2822 192.334 10.4932 192.227 10.6752 192.013 cv
10.8582 191.8 11.0432 191.532 11.2302 191.209 cv
11.2612 191.178 11.2982 191.162 11.3392 191.162 cv
11.5272 191.162 li
11.5682 191.162 11.6002 191.175 11.6212 191.201 cv
11.6422 191.227 11.6522 191.261 11.6522 191.302 cv
11.6522 191.344 11.6422 191.381 11.6212 191.412 cv
11.3402 191.901 11.0062 192.362 10.6212 192.795 cv
10.2362 193.227 9.7362 193.719 9.1212 194.271 cv
8.5062 194.823 7.9852 195.292 7.5582 195.677 cv
7.1312 196.063 6.7362 196.459 6.3712 196.865 cv
6.4542 196.844 6.5642 196.834 6.6992 196.834 cv
6.9592 196.834 7.3162 196.907 7.7692 197.052 cv
8.2222 197.198 8.5692 197.271 8.8082 197.271 cv
9.0792 197.271 9.3502 197.214 9.6212 197.099 cv
9.8922 196.984 10.1262 196.823 10.3242 196.615 cv
10.5222 196.406 10.6522 196.167 10.7142 195.896 cv
10.7452 195.823 10.7872 195.787 10.8392 195.787 cv
11.0432 195.787 li
11.0842 195.787 11.1182 195.805 11.1442 195.842 cv
11.1702 195.878 11.1832 195.912 11.1832 195.943 cv
11.1832 195.954 11.1782 195.969 11.1682 195.99 cv
11.0632 196.396 10.8892 196.784 10.6442 197.154 cv
10.3992 197.524 10.1002 197.829 9.7462 198.068 cv
9.3912 198.307 9.0112 198.427 8.6052 198.427 cv
8.3972 198.427 8.2232 198.378 8.0822 198.279 cv
7.9412 198.18 7.7772 198.029 7.5892 197.826 cv
7.4022 197.623 7.2482 197.474 7.1292 197.381 cv
7.0092 197.287 6.8602 197.24 6.6832 197.24 cv
6.1522 197.24 5.6782 197.615 5.2612 198.365 cv
5.2202 198.406 5.1832 198.427 5.1522 198.427 cv
4.9492 198.427 li
f
12.155 200.64 mo
12.155 200.343 li
12.155 200.322 12.16 200.302 12.171 200.281 cv
13.89 198.39 li
14.15 198.109 14.358 197.874 14.515 197.687 cv
14.671 197.5 14.83 197.283 14.991 197.038 cv
15.152 196.793 15.277 196.541 15.366 196.281 cv
15.455 196.02 15.499 195.749 15.499 195.468 cv
15.499 195.166 15.444 194.877 15.335 194.601 cv
15.226 194.325 15.062 194.106 14.843 193.945 cv
14.624 193.783 14.359 193.702 14.046 193.702 cv
13.723 193.702 13.434 193.798 13.179 193.991 cv
12.924 194.184 12.744 194.432 12.64 194.734 cv
12.671 194.723 12.713 194.718 12.765 194.718 cv
12.932 194.718 13.072 194.773 13.187 194.882 cv
13.301 194.991 13.358 195.135 13.358 195.312 cv
13.358 195.479 13.301 195.622 13.187 195.741 cv
13.072 195.861 12.932 195.921 12.765 195.921 cv
12.588 195.921 12.442 195.861 12.327 195.741 cv
12.212 195.622 12.155 195.479 12.155 195.312 cv
12.155 195.041 12.207 194.783 12.312 194.538 cv
12.416 194.293 12.564 194.077 12.757 193.89 cv
12.95 193.703 13.171 193.559 13.421 193.46 cv
13.671 193.361 13.931 193.312 14.202 193.312 cv
14.619 193.312 15.009 193.4 15.374 193.577 cv
15.739 193.754 16.025 194.004 16.233 194.327 cv
16.442 194.65 16.546 195.031 16.546 195.468 cv
16.546 195.791 16.476 196.095 16.335 196.382 cv
16.194 196.669 16.017 196.929 15.804 197.163 cv
15.59 197.398 15.311 197.663 14.968 197.96 cv
14.624 198.257 14.4 198.453 14.296 198.546 cv
13.046 199.749 li
14.108 199.749 li
14.629 199.749 15.064 199.744 15.413 199.734 cv
15.762 199.723 15.947 199.708 15.968 199.687 cv
16.051 199.604 16.14 199.27 16.233 198.687 cv
16.546 198.687 li
16.233 200.64 li
12.155 200.64 li
f
2 lw
0 lc
49.382 58.295 mo
49.382 58.295 li
1 /0 /CSD get_res sepcs
.751 sep
@
1 lw
49.382 58.295 mo
49.382 58.295 li
@
49.553 58.359 mo
49.553 58.359 li
@
49.893 58.486 mo
49.893 58.486 li
@
50.233 58.614 mo
50.233 58.614 li
@
50.659 58.773 mo
50.659 58.773 li
@
52.768 59.564 mo
52.768 59.564 li
@
54.848 60.345 mo
54.848 60.345 li
@
57.574 61.367 mo
57.574 61.367 li
1 /0 /CSD get_res sepcs
.747 sep
@
60.25 62.37 mo
60.25 62.37 li
@
62.877 63.355 mo
62.877 63.355 li
1 /0 /CSD get_res sepcs
.743 sep
@
65.455 64.322 mo
65.455 64.322 li
@
67.987 65.272 mo
67.987 65.272 li
1 /0 /CSD get_res sepcs
.74 sep
@
70.472 66.203 mo
70.472 66.203 li
@
72.912 67.118 mo
72.912 67.118 li
1 /0 /CSD get_res sepcs
.735 sep
@
75.307 68.016 mo
75.307 68.016 li
@
77.658 68.898 mo
77.658 68.898 li
1 /0 /CSD get_res sepcs
.73 sep
@
79.966 69.764 mo
79.966 69.764 li
@
82.232 70.613 mo
82.232 70.613 li
1 /0 /CSD get_res sepcs
.727 sep
@
84.456 71.448 mo
84.456 71.448 li
@
86.64 72.266 mo
86.64 72.266 li
1 /0 /CSD get_res sepcs
.723 sep
@
88.784 73.07 mo
88.784 73.07 li
@
90.888 73.86 mo
90.888 73.86 li
1 /0 /CSD get_res sepcs
.719 sep
@
92.954 74.634 mo
92.954 74.634 li
@
94.982 75.395 mo
94.982 75.395 li
@
96.973 76.141 mo
96.973 76.141 li
1 /0 /CSD get_res sepcs
.715 sep
@
98.928 76.874 mo
98.928 76.874 li
@
100.847 77.594 mo
100.847 77.594 li
1 /0 /CSD get_res sepcs
.711 sep
@
102.73 78.3 mo
102.73 78.3 li
@
104.579 78.994 mo
104.579 78.994 li
1 /0 /CSD get_res sepcs
.707 sep
@
106.395 79.674 mo
106.395 79.674 li
@
108.177 80.343 mo
108.177 80.343 li
1 /0 /CSD get_res sepcs
.703 sep
@
109.926 80.999 mo
109.926 80.999 li
@
111.643 81.643 mo
111.643 81.643 li
1 /0 /CSD get_res sepcs
.699 sep
@
113.329 82.275 mo
113.329 82.275 li
@
114.984 82.896 mo
114.984 82.896 li
1 /0 /CSD get_res sepcs
.695 sep
@
116.609 83.505 mo
116.609 83.505 li
@
118.204 84.103 mo
118.204 84.103 li
1 /0 /CSD get_res sepcs
.691 sep
@
119.77 84.69 mo
119.77 84.69 li
@
121.307 85.267 mo
121.307 85.267 li
1 /0 /CSD get_res sepcs
.688 sep
@
122.816 85.833 mo
122.816 85.833 li
@
124.298 86.388 mo
124.298 86.388 li
1 /0 /CSD get_res sepcs
.684 sep
@
125.752 86.933 mo
125.752 86.933 li
@
127.18 87.469 mo
127.18 87.469 li
@
128.581 87.994 mo
128.581 87.994 li
1 /0 /CSD get_res sepcs
.68 sep
@
129.957 88.51 mo
129.957 88.51 li
@
131.308 89.017 mo
131.308 89.017 li
1 /0 /CSD get_res sepcs
.676 sep
@
132.634 89.514 mo
132.634 89.514 li
@
133.935 90.002 mo
133.935 90.002 li
1 /0 /CSD get_res sepcs
.672 sep
@
135.213 90.481 mo
135.213 90.481 li
@
136.468 90.952 mo
136.468 90.952 li
1 /0 /CSD get_res sepcs
.669 sep
@
137.699 91.414 mo
137.699 91.414 li
@
138.908 91.867 mo
138.908 91.867 li
1 /0 /CSD get_res sepcs
.664 sep
@
140.095 92.312 mo
140.095 92.312 li
@
141.26 92.749 mo
141.26 92.749 li
1 /0 /CSD get_res sepcs
.66 sep
@
142.404 93.178 mo
142.404 93.178 li
@
143.527 93.599 mo
143.527 93.599 li
1 /0 /CSD get_res sepcs
.658 sep
@
144.629 94.012 mo
144.629 94.012 li
@
145.711 94.418 mo
145.711 94.418 li
1 /0 /CSD get_res sepcs
.652 sep
@
146.773 94.816 mo
146.773 94.816 li
@
147.816 95.207 mo
147.816 95.207 li
@
148.84 95.591 mo
148.84 95.591 li
1 /0 /CSD get_res sepcs
.649 sep
@
149.845 95.968 mo
149.845 95.968 li
@
150.831 96.338 mo
150.831 96.338 li
1 /0 /CSD get_res sepcs
.644 sep
@
151.8 96.701 mo
151.8 96.701 li
@
152.751 97.058 mo
152.751 97.058 li
1 /0 /CSD get_res sepcs
.642 sep
@
153.684 97.408 mo
153.684 97.408 li
@
154.6 97.752 mo
154.6 97.752 li
1 /0 /CSD get_res sepcs
.639 sep
@
155.5 98.089 mo
155.5 98.089 li
@
156.383 98.42 mo
156.383 98.42 li
1 /0 /CSD get_res sepcs
.634 sep
@
157.25 98.745 mo
157.25 98.745 li
@
158.101 99.064 mo
158.101 99.064 li
1 /0 /CSD get_res sepcs
.631 sep
@
158.936 99.378 mo
158.936 99.378 li
@
159.756 99.685 mo
159.756 99.685 li
1 /0 /CSD get_res sepcs
.627 sep
@
160.562 99.987 mo
160.562 99.987 li
@
161.352 100.283 mo
161.352 100.283 li
1 /0 /CSD get_res sepcs
.624 sep
@
162.128 100.574 mo
162.128 100.574 li
@
162.89 100.86 mo
162.89 100.86 li
1 /0 /CSD get_res sepcs
.621 sep
@
163.637 101.14 mo
163.637 101.14 li
@
164.372 101.416 mo
164.372 101.416 li
@
165.092 101.686 mo
165.092 101.686 li
1 /0 /CSD get_res sepcs
.616 sep
@
165.8 101.951 mo
165.8 101.951 li
@
166.494 102.212 mo
166.494 102.212 li
1 /0 /CSD get_res sepcs
.613 sep
@
167.176 102.467 mo
167.176 102.467 li
@
167.845 102.718 mo
167.845 102.718 li
1 /0 /CSD get_res sepcs
.609 sep
@
168.502 102.965 mo
168.502 102.965 li
@
169.147 103.207 mo
169.147 103.207 li
1 /0 /CSD get_res sepcs
.606 sep
@
169.78 103.444 mo
169.78 103.444 li
@
170.402 103.677 mo
170.402 103.677 li
1 /0 /CSD get_res sepcs
.603 sep
@
171.012 103.906 mo
171.012 103.906 li
@
171.611 104.131 mo
171.611 104.131 li
1 /0 /CSD get_res sepcs
.598 sep
@
172.2 104.351 mo
172.2 104.351 li
@
172.777 104.568 mo
172.777 104.568 li
1 /0 /CSD get_res sepcs
.595 sep
@
173.344 104.78 mo
173.344 104.78 li
@
173.9 104.989 mo
173.9 104.989 li
1 /0 /CSD get_res sepcs
.594 sep
@
174.446 105.194 mo
174.446 105.194 li
@
174.982 105.395 mo
174.982 105.395 li
1 /0 /CSD get_res sepcs
.589 sep
@
175.509 105.592 mo
175.509 105.592 li
@
176.026 105.786 mo
176.026 105.786 li
@
176.533 105.976 mo
176.533 105.976 li
1 /0 /CSD get_res sepcs
.586 sep
@
177.031 106.163 mo
177.031 106.163 li
@
177.52 106.346 mo
177.52 106.346 li
1 /0 /CSD get_res sepcs
.581 sep
@
178 106.526 mo
178 106.526 li
@
178.471 106.703 mo
178.471 106.703 li
1 /0 /CSD get_res sepcs
.579 sep
@
178.933 106.876 mo
178.933 106.876 li
@
179.387 107.047 mo
179.387 107.047 li
1 /0 /CSD get_res sepcs
.575 sep
@
179.833 107.214 mo
179.833 107.214 li
@
180.271 107.378 mo
180.271 107.378 li
1 /0 /CSD get_res sepcs
.572 sep
@
180.7 107.539 mo
180.7 107.539 li
@
181.122 107.697 mo
181.122 107.697 li
1 /0 /CSD get_res sepcs
.57 sep
@
181.618 107.883 mo
181.618 107.883 li
@
182.103 108.065 mo
182.103 108.065 li
1 /0 /CSD get_res sepcs
.564 sep
@
182.578 108.243 mo
182.578 108.243 li
@
183.042 108.417 mo
183.042 108.417 li
1 /0 /CSD get_res sepcs
.562 sep
@
183.496 108.587 mo
183.496 108.587 li
1 /0 /CSD get_res sepcs
.558 sep
@
183.94 108.754 mo
183.94 108.754 li
@
184.374 108.917 mo
184.374 108.917 li
1 /0 /CSD get_res sepcs
.556 sep
@
184.799 109.076 mo
184.799 109.076 li
@
185.214 109.232 mo
185.214 109.232 li
1 /0 /CSD get_res sepcs
.551 sep
@
185.62 109.384 mo
185.62 109.384 li
@
186.018 109.533 mo
186.018 109.533 li
1 /0 /CSD get_res sepcs
.549 sep
@
186.406 109.679 mo
186.406 109.679 li
@
186.786 109.821 mo
186.786 109.821 li
1 /0 /CSD get_res sepcs
.545 sep
@
187.158 109.961 mo
187.158 109.961 li
1 /0 /CSD get_res sepcs
.543 sep
@
187.522 110.097 mo
187.522 110.097 li
@
187.877 110.23 mo
187.877 110.23 li
1 /0 /CSD get_res sepcs
.538 sep
@
188.225 110.361 mo
188.225 110.361 li
@
188.565 110.488 mo
188.565 110.488 li
1 /0 /CSD get_res sepcs
.536 sep
@
188.898 110.613 mo
188.898 110.613 li
@
189.224 110.735 mo
189.224 110.735 li
1 /0 /CSD get_res sepcs
.532 sep
@
189.542 110.855 mo
189.542 110.855 li
1 /0 /CSD get_res sepcs
.53 sep
@
189.853 110.971 mo
189.853 110.971 li
@
190.158 111.086 mo
190.158 111.086 li
1 /0 /CSD get_res sepcs
.525 sep
@
190.455 111.197 mo
190.455 111.197 li
@
190.747 111.306 mo
190.747 111.306 li
1 /0 /CSD get_res sepcs
.523 sep
@
191.032 111.413 mo
191.032 111.413 li
@
191.31 111.518 mo
191.31 111.518 li
1 /0 /CSD get_res sepcs
.52 sep
@
191.583 111.62 mo
191.583 111.62 li
1 /0 /CSD get_res sepcs
.517 sep
@
191.849 111.72 mo
191.849 111.72 li
@
192.11 111.818 mo
192.11 111.818 li
1 /0 /CSD get_res sepcs
.513 sep
@
192.365 111.913 mo
192.365 111.913 li
@
192.615 112.007 mo
192.615 112.007 li
1 /0 /CSD get_res sepcs
.51 sep
@
192.858 112.098 mo
192.858 112.098 li
@
193.097 112.188 mo
193.097 112.188 li
1 /0 /CSD get_res sepcs
.505 sep
@
193.33 112.275 mo
193.33 112.275 li
1 /0 /CSD get_res sepcs
.503 sep
@
193.559 112.361 mo
193.559 112.361 li
@
193.827 112.462 mo
193.827 112.462 li
1 /0 /CSD get_res sepcs
.498 sep
@
194.089 112.56 mo
194.089 112.56 li
@
194.344 112.655 mo
194.344 112.655 li
1 /0 /CSD get_res sepcs
.495 sep
@
194.592 112.748 mo
194.592 112.748 li
1 /0 /CSD get_res sepcs
.493 sep
@
194.833 112.839 mo
194.833 112.839 li
1 /0 /CSD get_res sepcs
.489 sep
@
195.068 112.927 mo
195.068 112.927 li
@
195.297 113.013 mo
195.297 113.013 li
1 /0 /CSD get_res sepcs
.487 sep
@
195.52 113.096 mo
195.52 113.096 li
1 /0 /CSD get_res sepcs
.484 sep
@
195.737 113.178 mo
195.737 113.178 li
@
195.948 113.257 mo
195.948 113.257 li
1 /0 /CSD get_res sepcs
.479 sep
@
196.154 113.334 mo
196.154 113.334 li
1 /0 /CSD get_res sepcs
.477 sep
@
196.354 113.409 mo
196.354 113.409 li
@
196.549 113.482 mo
196.549 113.482 li
1 /0 /CSD get_res sepcs
.474 sep
@
196.739 113.553 mo
196.739 113.553 li
1 /0 /CSD get_res sepcs
.472 sep
@
196.923 113.623 mo
196.923 113.623 li
@
197.103 113.69 mo
197.103 113.69 li
1 /0 /CSD get_res sepcs
.467 sep
@
197.278 113.756 mo
197.278 113.756 li
1 /0 /CSD get_res sepcs
.464 sep
@
197.449 113.82 mo
197.449 113.82 li
@
197.615 113.882 mo
197.615 113.882 li
1 /0 /CSD get_res sepcs
.462 sep
@
197.777 113.943 mo
197.777 113.943 li
1 /0 /CSD get_res sepcs
.457 sep
@
197.934 114.002 mo
197.934 114.002 li
@
198.087 114.059 mo
198.087 114.059 li
1 /0 /CSD get_res sepcs
.455 sep
@
198.236 114.115 mo
198.236 114.115 li
1 /0 /CSD get_res sepcs
.452 sep
@
198.381 114.169 mo
198.381 114.169 li
1 /0 /CSD get_res sepcs
.45 sep
@
198.523 114.223 mo
198.523 114.223 li
@
198.688 114.284 mo
198.688 114.284 li
1 /0 /CSD get_res sepcs
.447 sep
@
198.848 114.344 mo
198.848 114.344 li
1 /0 /CSD get_res sepcs
.442 sep
@
199.003 114.402 mo
199.003 114.402 li
1 /0 /CSD get_res sepcs
.439 sep
@
199.152 114.459 mo
199.152 114.459 li
1 /0 /CSD get_res sepcs
.437 sep
@
199.219 114.484 mo
199.219 114.484 li
@
49.382 58.295 mo
49.382 58.295 li
49.553 58.359 li
49.893 58.486 li
50.233 58.614 li
50.659 58.773 li
52.768 59.564 li
54.848 60.345 li
57.574 61.367 li
1 /0 /CSD get_res sepcs
.751 sep
@
57.574 61.367 mo
60.25 62.37 li
62.877 63.355 li
1 /0 /CSD get_res sepcs
.747 sep
@
62.877 63.355 mo
65.455 64.322 li
67.987 65.272 li
1 /0 /CSD get_res sepcs
.743 sep
@
67.987 65.272 mo
70.472 66.203 li
72.912 67.118 li
1 /0 /CSD get_res sepcs
.74 sep
@
72.912 67.118 mo
75.307 68.016 li
77.658 68.898 li
1 /0 /CSD get_res sepcs
.735 sep
@
77.658 68.898 mo
79.966 69.764 li
82.232 70.613 li
1 /0 /CSD get_res sepcs
.73 sep
@
82.232 70.613 mo
84.456 71.448 li
86.64 72.266 li
1 /0 /CSD get_res sepcs
.727 sep
@
86.64 72.266 mo
88.784 73.07 li
90.888 73.86 li
1 /0 /CSD get_res sepcs
.723 sep
@
90.888 73.86 mo
92.954 74.634 li
94.982 75.395 li
96.973 76.141 li
1 /0 /CSD get_res sepcs
.719 sep
@
96.973 76.141 mo
98.928 76.874 li
100.847 77.594 li
1 /0 /CSD get_res sepcs
.715 sep
@
100.847 77.594 mo
102.73 78.3 li
104.579 78.994 li
1 /0 /CSD get_res sepcs
.711 sep
@
104.579 78.994 mo
106.395 79.674 li
108.177 80.343 li
1 /0 /CSD get_res sepcs
.707 sep
@
108.177 80.343 mo
109.926 80.999 li
111.643 81.643 li
1 /0 /CSD get_res sepcs
.703 sep
@
111.643 81.643 mo
113.329 82.275 li
114.984 82.896 li
1 /0 /CSD get_res sepcs
.699 sep
@
114.984 82.896 mo
116.609 83.505 li
118.204 84.103 li
1 /0 /CSD get_res sepcs
.695 sep
@
118.204 84.103 mo
119.77 84.69 li
121.307 85.267 li
1 /0 /CSD get_res sepcs
.691 sep
@
121.307 85.267 mo
122.816 85.833 li
124.298 86.388 li
1 /0 /CSD get_res sepcs
.688 sep
@
124.298 86.388 mo
125.752 86.933 li
127.18 87.469 li
128.581 87.994 li
1 /0 /CSD get_res sepcs
.684 sep
@
128.581 87.994 mo
129.957 88.51 li
131.308 89.017 li
1 /0 /CSD get_res sepcs
.68 sep
@
131.308 89.017 mo
132.634 89.514 li
133.935 90.002 li
1 /0 /CSD get_res sepcs
.676 sep
@
133.935 90.002 mo
135.213 90.481 li
136.468 90.952 li
1 /0 /CSD get_res sepcs
.672 sep
@
136.468 90.952 mo
137.699 91.414 li
138.908 91.867 li
1 /0 /CSD get_res sepcs
.669 sep
@
138.908 91.867 mo
140.095 92.312 li
141.26 92.749 li
1 /0 /CSD get_res sepcs
.664 sep
@
141.26 92.749 mo
142.404 93.178 li
143.527 93.599 li
1 /0 /CSD get_res sepcs
.66 sep
@
143.527 93.599 mo
144.629 94.012 li
145.711 94.418 li
1 /0 /CSD get_res sepcs
.658 sep
@
145.711 94.418 mo
146.773 94.816 li
147.816 95.207 li
148.84 95.591 li
1 /0 /CSD get_res sepcs
.652 sep
@
148.84 95.591 mo
149.845 95.968 li
150.831 96.338 li
1 /0 /CSD get_res sepcs
.649 sep
@
150.831 96.338 mo
151.8 96.701 li
152.751 97.058 li
1 /0 /CSD get_res sepcs
.644 sep
@
152.751 97.058 mo
153.684 97.408 li
154.6 97.752 li
1 /0 /CSD get_res sepcs
.642 sep
@
154.6 97.752 mo
155.5 98.089 li
156.383 98.42 li
1 /0 /CSD get_res sepcs
.639 sep
@
156.383 98.42 mo
157.25 98.745 li
158.101 99.064 li
1 /0 /CSD get_res sepcs
.634 sep
@
158.101 99.064 mo
158.936 99.378 li
159.756 99.685 li
1 /0 /CSD get_res sepcs
.631 sep
@
159.756 99.685 mo
160.562 99.987 li
161.352 100.283 li
1 /0 /CSD get_res sepcs
.627 sep
@
161.352 100.283 mo
162.128 100.574 li
162.89 100.86 li
1 /0 /CSD get_res sepcs
.624 sep
@
162.89 100.86 mo
163.637 101.14 li
164.372 101.416 li
165.092 101.686 li
1 /0 /CSD get_res sepcs
.621 sep
@
165.092 101.686 mo
165.8 101.951 li
166.494 102.212 li
1 /0 /CSD get_res sepcs
.616 sep
@
166.494 102.212 mo
167.176 102.467 li
167.845 102.718 li
1 /0 /CSD get_res sepcs
.613 sep
@
167.845 102.718 mo
168.502 102.965 li
169.147 103.207 li
1 /0 /CSD get_res sepcs
.609 sep
@
169.147 103.207 mo
169.78 103.444 li
170.402 103.677 li
1 /0 /CSD get_res sepcs
.606 sep
@
170.402 103.677 mo
171.012 103.906 li
171.611 104.131 li
1 /0 /CSD get_res sepcs
.603 sep
@
171.611 104.131 mo
172.2 104.351 li
172.777 104.568 li
1 /0 /CSD get_res sepcs
.598 sep
@
172.777 104.568 mo
173.344 104.78 li
173.9 104.989 li
1 /0 /CSD get_res sepcs
.595 sep
@
173.9 104.989 mo
174.446 105.194 li
174.982 105.395 li
1 /0 /CSD get_res sepcs
.594 sep
@
174.982 105.395 mo
175.509 105.592 li
176.026 105.786 li
176.533 105.976 li
1 /0 /CSD get_res sepcs
.589 sep
@
176.533 105.976 mo
177.031 106.163 li
177.52 106.346 li
1 /0 /CSD get_res sepcs
.586 sep
@
177.52 106.346 mo
178 106.526 li
178.471 106.703 li
1 /0 /CSD get_res sepcs
.581 sep
@
178.471 106.703 mo
178.933 106.876 li
179.387 107.047 li
1 /0 /CSD get_res sepcs
.579 sep
@
179.387 107.047 mo
179.833 107.214 li
180.271 107.378 li
1 /0 /CSD get_res sepcs
.575 sep
@
180.271 107.378 mo
180.7 107.539 li
181.122 107.697 li
1 /0 /CSD get_res sepcs
.572 sep
@
181.122 107.697 mo
181.618 107.883 li
182.103 108.065 li
1 /0 /CSD get_res sepcs
.57 sep
@
182.103 108.065 mo
182.578 108.243 li
183.042 108.417 li
1 /0 /CSD get_res sepcs
.564 sep
@
183.042 108.417 mo
183.496 108.587 li
1 /0 /CSD get_res sepcs
.562 sep
@
183.496 108.587 mo
183.94 108.754 li
184.374 108.917 li
1 /0 /CSD get_res sepcs
.558 sep
@
184.374 108.917 mo
184.799 109.076 li
185.214 109.232 li
1 /0 /CSD get_res sepcs
.556 sep
@
185.214 109.232 mo
185.62 109.384 li
186.018 109.533 li
1 /0 /CSD get_res sepcs
.551 sep
@
186.018 109.533 mo
186.406 109.679 li
186.786 109.821 li
1 /0 /CSD get_res sepcs
.549 sep
@
186.786 109.821 mo
187.158 109.961 li
1 /0 /CSD get_res sepcs
.545 sep
@
187.158 109.961 mo
187.522 110.097 li
187.877 110.23 li
1 /0 /CSD get_res sepcs
.543 sep
@
187.877 110.23 mo
188.225 110.361 li
188.565 110.488 li
1 /0 /CSD get_res sepcs
.538 sep
@
188.565 110.488 mo
188.898 110.613 li
189.224 110.735 li
1 /0 /CSD get_res sepcs
.536 sep
@
189.224 110.735 mo
189.542 110.855 li
1 /0 /CSD get_res sepcs
.532 sep
@
189.542 110.855 mo
189.853 110.971 li
190.158 111.086 li
1 /0 /CSD get_res sepcs
.53 sep
@
190.158 111.086 mo
190.455 111.197 li
190.747 111.306 li
1 /0 /CSD get_res sepcs
.525 sep
@
190.747 111.306 mo
191.032 111.413 li
191.31 111.518 li
1 /0 /CSD get_res sepcs
.523 sep
@
191.31 111.518 mo
191.583 111.62 li
1 /0 /CSD get_res sepcs
.52 sep
@
191.583 111.62 mo
191.849 111.72 li
192.11 111.818 li
1 /0 /CSD get_res sepcs
.517 sep
@
192.11 111.818 mo
192.365 111.913 li
192.615 112.007 li
1 /0 /CSD get_res sepcs
.513 sep
@
192.615 112.007 mo
192.858 112.098 li
193.097 112.188 li
1 /0 /CSD get_res sepcs
.51 sep
@
193.097 112.188 mo
193.33 112.275 li
1 /0 /CSD get_res sepcs
.505 sep
@
193.33 112.275 mo
193.559 112.361 li
193.827 112.462 li
1 /0 /CSD get_res sepcs
.503 sep
@
193.827 112.462 mo
194.089 112.56 li
194.344 112.655 li
1 /0 /CSD get_res sepcs
.498 sep
@
194.344 112.655 mo
194.592 112.748 li
1 /0 /CSD get_res sepcs
.495 sep
@
194.592 112.748 mo
194.833 112.839 li
1 /0 /CSD get_res sepcs
.493 sep
@
194.833 112.839 mo
195.068 112.927 li
195.297 113.013 li
1 /0 /CSD get_res sepcs
.489 sep
@
195.297 113.013 mo
195.52 113.096 li
1 /0 /CSD get_res sepcs
.487 sep
@
195.52 113.096 mo
195.737 113.178 li
195.948 113.257 li
1 /0 /CSD get_res sepcs
.484 sep
@
195.948 113.257 mo
196.154 113.334 li
1 /0 /CSD get_res sepcs
.479 sep
@
196.154 113.334 mo
196.354 113.409 li
196.549 113.482 li
1 /0 /CSD get_res sepcs
.477 sep
@
196.549 113.482 mo
196.739 113.553 li
1 /0 /CSD get_res sepcs
.474 sep
@
196.739 113.553 mo
196.923 113.623 li
197.103 113.69 li
1 /0 /CSD get_res sepcs
.472 sep
@
197.103 113.69 mo
197.278 113.756 li
1 /0 /CSD get_res sepcs
.467 sep
@
197.278 113.756 mo
197.449 113.82 li
197.615 113.882 li
1 /0 /CSD get_res sepcs
.464 sep
@
197.615 113.882 mo
197.777 113.943 li
1 /0 /CSD get_res sepcs
.462 sep
@
197.777 113.943 mo
197.934 114.002 li
198.087 114.059 li
1 /0 /CSD get_res sepcs
.457 sep
@
198.087 114.059 mo
198.236 114.115 li
1 /0 /CSD get_res sepcs
.455 sep
@
198.236 114.115 mo
198.381 114.169 li
1 /0 /CSD get_res sepcs
.452 sep
@
198.381 114.169 mo
198.523 114.223 li
198.688 114.284 li
1 /0 /CSD get_res sepcs
.45 sep
@
198.688 114.284 mo
198.848 114.344 li
1 /0 /CSD get_res sepcs
.447 sep
@
198.848 114.344 mo
199.003 114.402 li
1 /0 /CSD get_res sepcs
.442 sep
@
199.003 114.402 mo
199.152 114.459 li
1 /0 /CSD get_res sepcs
.439 sep
@
199.152 114.459 mo
199.219 114.484 li
1 /0 /CSD get_res sepcs
.437 sep
@
49.382 58.295 mo
49.382 58.295 li
49.553 58.359 li
49.893 58.486 li
50.233 58.614 li
50.659 58.773 li
52.768 59.564 li
54.848 60.345 li
57.574 61.367 li
1 /0 /CSD get_res sepcs
.751 sep
@
57.574 61.367 mo
60.25 62.37 li
62.877 63.355 li
1 /0 /CSD get_res sepcs
.747 sep
@
62.877 63.355 mo
65.455 64.322 li
67.987 65.272 li
1 /0 /CSD get_res sepcs
.743 sep
@
67.987 65.272 mo
70.472 66.203 li
72.912 67.118 li
1 /0 /CSD get_res sepcs
.74 sep
@
72.912 67.118 mo
75.307 68.016 li
77.658 68.898 li
1 /0 /CSD get_res sepcs
.735 sep
@
77.658 68.898 mo
79.966 69.764 li
82.232 70.613 li
1 /0 /CSD get_res sepcs
.73 sep
@
82.232 70.613 mo
84.456 71.448 li
86.64 72.266 li
1 /0 /CSD get_res sepcs
.727 sep
@
86.64 72.266 mo
88.784 73.07 li
90.888 73.86 li
1 /0 /CSD get_res sepcs
.723 sep
@
90.888 73.86 mo
92.954 74.634 li
94.982 75.395 li
96.973 76.141 li
1 /0 /CSD get_res sepcs
.719 sep
@
96.973 76.141 mo
98.928 76.874 li
100.847 77.594 li
1 /0 /CSD get_res sepcs
.715 sep
@
100.847 77.594 mo
102.73 78.3 li
104.579 78.994 li
1 /0 /CSD get_res sepcs
.711 sep
@
104.579 78.994 mo
106.395 79.674 li
108.177 80.343 li
1 /0 /CSD get_res sepcs
.707 sep
@
108.177 80.343 mo
109.926 80.999 li
111.643 81.643 li
1 /0 /CSD get_res sepcs
.703 sep
@
111.643 81.643 mo
113.329 82.275 li
114.984 82.896 li
1 /0 /CSD get_res sepcs
.699 sep
@
114.984 82.896 mo
116.609 83.505 li
118.204 84.103 li
1 /0 /CSD get_res sepcs
.695 sep
@
118.204 84.103 mo
119.77 84.69 li
121.307 85.267 li
1 /0 /CSD get_res sepcs
.691 sep
@
121.307 85.267 mo
122.816 85.833 li
124.298 86.388 li
1 /0 /CSD get_res sepcs
.688 sep
@
124.298 86.388 mo
125.752 86.933 li
127.18 87.469 li
128.581 87.994 li
1 /0 /CSD get_res sepcs
.684 sep
@
128.581 87.994 mo
129.957 88.51 li
131.308 89.017 li
1 /0 /CSD get_res sepcs
.68 sep
@
131.308 89.017 mo
132.634 89.514 li
133.935 90.002 li
1 /0 /CSD get_res sepcs
.676 sep
@
133.935 90.002 mo
135.213 90.481 li
136.468 90.952 li
1 /0 /CSD get_res sepcs
.672 sep
@
136.468 90.952 mo
137.699 91.414 li
138.908 91.867 li
1 /0 /CSD get_res sepcs
.669 sep
@
138.908 91.867 mo
140.095 92.312 li
141.26 92.749 li
1 /0 /CSD get_res sepcs
.664 sep
@
141.26 92.749 mo
142.404 93.178 li
143.527 93.599 li
1 /0 /CSD get_res sepcs
.66 sep
@
143.527 93.599 mo
144.629 94.012 li
145.711 94.418 li
1 /0 /CSD get_res sepcs
.658 sep
@
145.711 94.418 mo
146.773 94.816 li
147.816 95.207 li
148.84 95.591 li
1 /0 /CSD get_res sepcs
.652 sep
@
148.84 95.591 mo
149.845 95.968 li
150.831 96.338 li
1 /0 /CSD get_res sepcs
.649 sep
@
150.831 96.338 mo
151.8 96.701 li
152.751 97.058 li
1 /0 /CSD get_res sepcs
.644 sep
@
152.751 97.058 mo
153.684 97.408 li
154.6 97.752 li
1 /0 /CSD get_res sepcs
.642 sep
@
154.6 97.752 mo
155.5 98.089 li
156.383 98.42 li
1 /0 /CSD get_res sepcs
.639 sep
@
156.383 98.42 mo
157.25 98.745 li
158.101 99.064 li
1 /0 /CSD get_res sepcs
.634 sep
@
158.101 99.064 mo
158.936 99.378 li
159.756 99.685 li
1 /0 /CSD get_res sepcs
.631 sep
@
159.756 99.685 mo
160.562 99.987 li
161.352 100.283 li
1 /0 /CSD get_res sepcs
.627 sep
@
161.352 100.283 mo
162.128 100.574 li
162.89 100.86 li
1 /0 /CSD get_res sepcs
.624 sep
@
162.89 100.86 mo
163.637 101.14 li
164.372 101.416 li
165.092 101.686 li
1 /0 /CSD get_res sepcs
.621 sep
@
165.092 101.686 mo
165.8 101.951 li
166.494 102.212 li
1 /0 /CSD get_res sepcs
.616 sep
@
166.494 102.212 mo
167.176 102.467 li
167.845 102.718 li
1 /0 /CSD get_res sepcs
.613 sep
@
167.845 102.718 mo
168.502 102.965 li
169.147 103.207 li
1 /0 /CSD get_res sepcs
.609 sep
@
169.147 103.207 mo
169.78 103.444 li
170.402 103.677 li
1 /0 /CSD get_res sepcs
.606 sep
@
170.402 103.677 mo
171.012 103.906 li
171.611 104.131 li
1 /0 /CSD get_res sepcs
.603 sep
@
171.611 104.131 mo
172.2 104.351 li
172.777 104.568 li
1 /0 /CSD get_res sepcs
.598 sep
@
172.777 104.568 mo
173.344 104.78 li
173.9 104.989 li
1 /0 /CSD get_res sepcs
.595 sep
@
173.9 104.989 mo
174.446 105.194 li
174.982 105.395 li
1 /0 /CSD get_res sepcs
.594 sep
@
174.982 105.395 mo
175.509 105.592 li
176.026 105.786 li
176.533 105.976 li
1 /0 /CSD get_res sepcs
.589 sep
@
176.533 105.976 mo
177.031 106.163 li
177.52 106.346 li
1 /0 /CSD get_res sepcs
.586 sep
@
177.52 106.346 mo
178 106.526 li
178.471 106.703 li
1 /0 /CSD get_res sepcs
.581 sep
@
178.471 106.703 mo
178.933 106.876 li
179.387 107.047 li
1 /0 /CSD get_res sepcs
.579 sep
@
179.387 107.047 mo
179.833 107.214 li
180.271 107.378 li
1 /0 /CSD get_res sepcs
.575 sep
@
180.271 107.378 mo
180.7 107.539 li
181.122 107.697 li
1 /0 /CSD get_res sepcs
.572 sep
@
181.122 107.697 mo
181.618 107.883 li
182.103 108.065 li
1 /0 /CSD get_res sepcs
.57 sep
@
182.103 108.065 mo
182.578 108.243 li
183.042 108.417 li
1 /0 /CSD get_res sepcs
.564 sep
@
183.042 108.417 mo
183.496 108.587 li
1 /0 /CSD get_res sepcs
.562 sep
@
183.496 108.587 mo
183.94 108.754 li
184.374 108.917 li
1 /0 /CSD get_res sepcs
.558 sep
@
184.374 108.917 mo
184.799 109.076 li
185.214 109.232 li
1 /0 /CSD get_res sepcs
.556 sep
@
185.214 109.232 mo
185.62 109.384 li
186.018 109.533 li
1 /0 /CSD get_res sepcs
.551 sep
@
186.018 109.533 mo
186.406 109.679 li
186.786 109.821 li
1 /0 /CSD get_res sepcs
.549 sep
@
186.786 109.821 mo
187.158 109.961 li
1 /0 /CSD get_res sepcs
.545 sep
@
187.158 109.961 mo
187.522 110.097 li
187.877 110.23 li
1 /0 /CSD get_res sepcs
.543 sep
@
187.877 110.23 mo
188.225 110.361 li
188.565 110.488 li
1 /0 /CSD get_res sepcs
.538 sep
@
188.565 110.488 mo
188.898 110.613 li
189.224 110.735 li
1 /0 /CSD get_res sepcs
.536 sep
@
189.224 110.735 mo
189.542 110.855 li
1 /0 /CSD get_res sepcs
.532 sep
@
189.542 110.855 mo
189.853 110.971 li
190.158 111.086 li
1 /0 /CSD get_res sepcs
.53 sep
@
190.158 111.086 mo
190.455 111.197 li
190.747 111.306 li
1 /0 /CSD get_res sepcs
.525 sep
@
190.747 111.306 mo
191.032 111.413 li
191.31 111.518 li
1 /0 /CSD get_res sepcs
.523 sep
@
191.31 111.518 mo
191.583 111.62 li
1 /0 /CSD get_res sepcs
.52 sep
@
191.583 111.62 mo
191.849 111.72 li
192.11 111.818 li
1 /0 /CSD get_res sepcs
.517 sep
@
192.11 111.818 mo
192.365 111.913 li
192.615 112.007 li
1 /0 /CSD get_res sepcs
.513 sep
@
192.615 112.007 mo
192.858 112.098 li
193.097 112.188 li
1 /0 /CSD get_res sepcs
.51 sep
@
193.097 112.188 mo
193.33 112.275 li
1 /0 /CSD get_res sepcs
.505 sep
@
193.33 112.275 mo
193.559 112.361 li
193.827 112.462 li
1 /0 /CSD get_res sepcs
.503 sep
@
193.827 112.462 mo
194.089 112.56 li
194.344 112.655 li
1 /0 /CSD get_res sepcs
.498 sep
@
194.344 112.655 mo
194.592 112.748 li
1 /0 /CSD get_res sepcs
.495 sep
@
194.592 112.748 mo
194.833 112.839 li
1 /0 /CSD get_res sepcs
.493 sep
@
194.833 112.839 mo
195.068 112.927 li
195.297 113.013 li
1 /0 /CSD get_res sepcs
.489 sep
@
195.297 113.013 mo
195.52 113.096 li
1 /0 /CSD get_res sepcs
.487 sep
@
195.52 113.096 mo
195.737 113.178 li
195.948 113.257 li
1 /0 /CSD get_res sepcs
.484 sep
@
195.948 113.257 mo
196.154 113.334 li
1 /0 /CSD get_res sepcs
.479 sep
@
196.154 113.334 mo
196.354 113.409 li
196.549 113.482 li
1 /0 /CSD get_res sepcs
.477 sep
@
196.549 113.482 mo
196.739 113.553 li
1 /0 /CSD get_res sepcs
.474 sep
@
196.739 113.553 mo
196.923 113.623 li
197.103 113.69 li
1 /0 /CSD get_res sepcs
.472 sep
@
197.103 113.69 mo
197.278 113.756 li
1 /0 /CSD get_res sepcs
.467 sep
@
197.278 113.756 mo
197.449 113.82 li
197.615 113.882 li
1 /0 /CSD get_res sepcs
.464 sep
@
197.615 113.882 mo
197.777 113.943 li
1 /0 /CSD get_res sepcs
.462 sep
@
197.777 113.943 mo
197.934 114.002 li
198.087 114.059 li
1 /0 /CSD get_res sepcs
.457 sep
@
198.087 114.059 mo
198.236 114.115 li
1 /0 /CSD get_res sepcs
.455 sep
@
198.236 114.115 mo
198.381 114.169 li
1 /0 /CSD get_res sepcs
.452 sep
@
198.381 114.169 mo
198.523 114.223 li
198.688 114.284 li
1 /0 /CSD get_res sepcs
.45 sep
@
198.688 114.284 mo
198.848 114.344 li
1 /0 /CSD get_res sepcs
.447 sep
@
198.848 114.344 mo
199.003 114.402 li
1 /0 /CSD get_res sepcs
.442 sep
@
199.003 114.402 mo
199.152 114.459 li
1 /0 /CSD get_res sepcs
.439 sep
@
199.152 114.459 mo
199.219 114.484 li
1 /0 /CSD get_res sepcs
.437 sep
@
2 lj
[10 6 ] 0 dsh
49.382 58.295 mo
49.382 58.295 li
49.382 58.295 mo
49.382 58.295 li
49.382 58.295 mo
49.382 58.295 li
49.382 58.295 mo
49.382 58.295 li
1 /0 /CSD get_res sepcs
.751 sep
@
0 lj
[] 0 dsh
49.382 55.295 mo
49.382 61.295 li
@
46.382 58.295 mo
52.382 58.295 li
@
47.261 56.174 mo
51.503 60.416 li
@
47.261 60.416 mo
51.503 56.174 li
@
49.382 55.295 mo
49.382 61.295 li
@
46.382 58.295 mo
52.382 58.295 li
@
47.261 56.174 mo
51.503 60.416 li
@
47.261 60.416 mo
51.503 56.174 li
@
49.382 55.295 mo
49.382 61.295 li
@
46.382 58.295 mo
52.382 58.295 li
@
47.261 56.174 mo
51.503 60.416 li
@
47.261 60.416 mo
51.503 56.174 li
@
49.382 55.295 mo
49.382 61.295 li
@
46.382 58.295 mo
52.382 58.295 li
@
47.261 56.174 mo
51.503 60.416 li
@
47.261 60.416 mo
51.503 56.174 li
@
1 lj
199.219 114.484 mo
199.219 114.484 li
1 /0 /CSD get_res sepcs
.437 sep
@
203.078 127.989 mo
203.078 127.989 li
1 /0 /CSD get_res sepcs
.431 sep
@
206.937 141.495 mo
206.937 141.495 li
1 /0 /CSD get_res sepcs
.421 sep
@
210.795 155.001 mo
210.795 155.001 li
1 /0 /CSD get_res sepcs
.413 sep
@
214.654 168.507 mo
214.654 168.507 li
1 /0 /CSD get_res sepcs
.407 sep
@
218.513 182.013 mo
218.513 182.013 li
1 /0 /CSD get_res sepcs
.396 sep
@
222.372 195.519 mo
222.372 195.519 li
1 /0 /CSD get_res sepcs
.391 sep
@
226.231 209.025 mo
226.231 209.025 li
1 /0 /CSD get_res sepcs
.383 sep
@
230.089 222.531 mo
230.089 222.531 li
1 /0 /CSD get_res sepcs
.381 sep
@
230.716 224.724 mo
230.716 224.724 li
1 /0 /CSD get_res sepcs
.379 sep
@
199.219 114.484 mo
199.219 114.484 li
203.078 127.989 li
1 /0 /CSD get_res sepcs
.437 sep
@
203.078 127.989 mo
206.937 141.495 li
1 /0 /CSD get_res sepcs
.431 sep
@
206.937 141.495 mo
210.795 155.001 li
1 /0 /CSD get_res sepcs
.421 sep
@
210.795 155.001 mo
214.654 168.507 li
1 /0 /CSD get_res sepcs
.413 sep
@
214.654 168.507 mo
218.513 182.013 li
1 /0 /CSD get_res sepcs
.407 sep
@
218.513 182.013 mo
222.372 195.519 li
1 /0 /CSD get_res sepcs
.396 sep
@
222.372 195.519 mo
226.231 209.025 li
1 /0 /CSD get_res sepcs
.391 sep
@
226.231 209.025 mo
230.089 222.531 li
1 /0 /CSD get_res sepcs
.383 sep
@
230.089 222.531 mo
230.716 224.724 li
1 /0 /CSD get_res sepcs
.381 sep
@
199.219 114.484 mo
199.219 114.484 li
203.078 127.989 li
1 /0 /CSD get_res sepcs
.437 sep
@
203.078 127.989 mo
206.937 141.495 li
1 /0 /CSD get_res sepcs
.431 sep
@
206.937 141.495 mo
210.795 155.001 li
1 /0 /CSD get_res sepcs
.421 sep
@
210.795 155.001 mo
214.654 168.507 li
1 /0 /CSD get_res sepcs
.413 sep
@
214.654 168.507 mo
218.513 182.013 li
1 /0 /CSD get_res sepcs
.407 sep
@
218.513 182.013 mo
222.372 195.519 li
1 /0 /CSD get_res sepcs
.396 sep
@
222.372 195.519 mo
226.231 209.025 li
1 /0 /CSD get_res sepcs
.391 sep
@
226.231 209.025 mo
230.089 222.531 li
1 /0 /CSD get_res sepcs
.383 sep
@
230.089 222.531 mo
230.716 224.724 li
1 /0 /CSD get_res sepcs
.381 sep
@
2 lj
[10 6 ] 0 dsh
199.219 114.484 mo
199.219 114.484 li
199.219 114.484 mo
199.219 114.484 li
199.219 114.484 mo
199.219 114.484 li
199.219 114.484 mo
199.219 114.484 li
1 /0 /CSD get_res sepcs
.437 sep
@
0 lj
[] 0 dsh
199.219 111.484 mo
199.219 117.484 li
@
196.219 114.484 mo
202.219 114.484 li
@
197.098 112.363 mo
201.34 116.605 li
@
197.098 116.605 mo
201.34 112.363 li
@
199.219 111.484 mo
199.219 117.484 li
@
196.219 114.484 mo
202.219 114.484 li
@
197.098 112.363 mo
201.34 116.605 li
@
197.098 116.605 mo
201.34 112.363 li
@
199.219 111.484 mo
199.219 117.484 li
@
196.219 114.484 mo
202.219 114.484 li
@
197.098 112.363 mo
201.34 116.605 li
@
197.098 116.605 mo
201.34 112.363 li
@
199.219 111.484 mo
199.219 117.484 li
@
196.219 114.484 mo
202.219 114.484 li
@
197.098 112.363 mo
201.34 116.605 li
@
197.098 116.605 mo
201.34 112.363 li
@
1 lj
230.716 224.724 mo
230.716 224.724 li
1 /0 /CSD get_res sepcs
.379 sep
@
230.728 224.751 mo
230.728 224.751 li
@
230.751 224.803 mo
230.751 224.803 li
@
230.774 224.855 mo
230.774 224.855 li
@
230.802 224.921 mo
230.802 224.921 li
@
230.944 225.245 mo
230.944 225.245 li
@
231.085 225.566 mo
231.085 225.566 li
1 /0 /CSD get_res sepcs
.376 sep
@
231.275 226.001 mo
231.275 226.001 li
@
231.463 226.43 mo
231.463 226.43 li
1 /0 /CSD get_res sepcs
.374 sep
@
231.647 226.851 mo
231.647 226.851 li
@
231.829 227.265 mo
231.829 227.265 li
@
232.007 227.672 mo
232.007 227.672 li
1 /0 /CSD get_res sepcs
.371 sep
@
232.182 228.073 mo
232.182 228.073 li
@
232.354 228.466 mo
232.354 228.466 li
1 /0 /CSD get_res sepcs
.372 sep
@
232.524 228.853 mo
232.524 228.853 li
@
232.69 229.233 mo
232.69 229.233 li
1 /0 /CSD get_res sepcs
.369 sep
@
232.854 229.606 mo
232.854 229.606 li
@
233.015 229.974 mo
233.015 229.974 li
@
233.173 230.335 mo
233.173 230.335 li
1 /0 /CSD get_res sepcs
.366 sep
@
233.328 230.69 mo
233.328 230.69 li
@
233.481 231.039 mo
233.481 231.039 li
1 /0 /CSD get_res sepcs
.363 sep
@
233.631 231.382 mo
233.631 231.382 li
@
233.779 231.719 mo
233.779 231.719 li
1 /0 /CSD get_res sepcs
.364 sep
@
233.924 232.05 mo
233.924 232.05 li
@
234.066 232.376 mo
234.066 232.376 li
1 /0 /CSD get_res sepcs
.362 sep
@
234.207 232.696 mo
234.207 232.696 li
@
234.344 233.011 mo
234.344 233.011 li
@
234.48 233.321 mo
234.48 233.321 li
1 /0 /CSD get_res sepcs
.359 sep
@
234.613 233.625 mo
234.613 233.625 li
@
234.744 233.924 mo
234.744 233.924 li
@
234.873 234.218 mo
234.873 234.218 li
@
234.999 234.507 mo
234.999 234.507 li
1 /0 /CSD get_res sepcs
.356 sep
@
235.124 234.791 mo
235.124 234.791 li
@
235.246 235.07 mo
235.246 235.07 li
@
235.366 235.345 mo
235.366 235.345 li
1 /0 /CSD get_res sepcs
.353 sep
@
235.484 235.615 mo
235.484 235.615 li
@
235.6 235.88 mo
235.6 235.88 li
1 /0 /CSD get_res sepcs
.354 sep
@
235.715 236.141 mo
235.715 236.141 li
@
235.827 236.397 mo
235.827 236.397 li
1 /0 /CSD get_res sepcs
.351 sep
@
235.937 236.649 mo
235.937 236.649 li
@
236.046 236.897 mo
236.046 236.897 li
@
236.152 237.14 mo
236.152 237.14 li
@
236.257 237.38 mo
236.257 237.38 li
@
236.36 237.615 mo
236.36 237.615 li
1 /0 /CSD get_res sepcs
.348 sep
@
236.461 237.846 mo
236.461 237.846 li
@
236.561 238.074 mo
236.561 238.074 li
@
236.659 238.297 mo
236.659 238.297 li
@
236.755 238.517 mo
236.755 238.517 li
1 /0 /CSD get_res sepcs
.345 sep
@
236.849 238.733 mo
236.849 238.733 li
@
236.942 238.945 mo
236.942 238.945 li
@
237.034 239.154 mo
237.034 239.154 li
1 /0 /CSD get_res sepcs
.341 sep
@
237.124 239.359 mo
237.124 239.359 li
@
237.212 239.561 mo
237.212 239.561 li
@
237.299 239.759 mo
237.299 239.759 li
@
237.384 239.954 mo
237.384 239.954 li
1 /0 /CSD get_res sepcs
.338 sep
@
237.468 240.146 mo
237.468 240.146 li
@
237.55 240.334 mo
237.55 240.334 li
@
237.631 240.519 mo
237.631 240.519 li
@
237.711 240.701 mo
237.711 240.701 li
@
237.789 240.88 mo
237.789 240.88 li
1 /0 /CSD get_res sepcs
.335 sep
@
237.866 241.056 mo
237.866 241.056 li
@
237.942 241.229 mo
237.942 241.229 li
@
238.017 241.399 mo
238.017 241.399 li
@
238.09 241.566 mo
238.09 241.566 li
1 /0 /CSD get_res sepcs
.332 sep
@
238.162 241.73 mo
238.162 241.73 li
@
238.232 241.891 mo
238.232 241.891 li
@
238.302 242.05 mo
238.302 242.05 li
@
238.37 242.206 mo
238.37 242.206 li
@
238.437 242.359 mo
238.437 242.359 li
1 /0 /CSD get_res sepcs
.329 sep
@
238.516 242.54 mo
238.516 242.54 li
@
238.594 242.717 mo
238.594 242.717 li
@
238.67 242.891 mo
238.67 242.891 li
@
238.744 243.061 mo
238.744 243.061 li
1 /0 /CSD get_res sepcs
.326 sep
@
238.817 243.227 mo
238.817 243.227 li
@
238.889 243.391 mo
238.889 243.391 li
1 /0 /CSD get_res sepcs
.323 sep
@
238.959 243.55 mo
238.959 243.55 li
@
239.027 243.707 mo
239.027 243.707 li
@
239.094 243.86 mo
239.094 243.86 li
1 /0 /CSD get_res sepcs
.32 sep
@
239.16 244.011 mo
239.16 244.011 li
@
239.225 244.158 mo
239.225 244.158 li
@
239.288 244.302 mo
239.288 244.302 li
@
239.35 244.443 mo
239.35 244.443 li
1 /0 /CSD get_res sepcs
.317 sep
@
239.41 244.582 mo
239.41 244.582 li
@
239.469 244.717 mo
239.469 244.717 li
@
239.528 244.85 mo
239.528 244.85 li
@
239.585 244.98 mo
239.585 244.98 li
1 /0 /CSD get_res sepcs
.314 sep
@
239.64 245.108 mo
239.64 245.108 li
@
239.695 245.232 mo
239.695 245.232 li
1 /0 /CSD get_res sepcs
.313 sep
@
239.749 245.355 mo
239.749 245.355 li
@
239.801 245.475 mo
239.801 245.475 li
1 /0 /CSD get_res sepcs
.31 sep
@
239.852 245.592 mo
239.852 245.592 li
@
239.903 245.707 mo
239.903 245.707 li
1 /0 /CSD get_res sepcs
.309 sep
@
239.952 245.82 mo
239.952 245.82 li
@
240 245.93 mo
240 245.93 li
@
240.048 246.038 mo
240.048 246.038 li
1 /0 /CSD get_res sepcs
.305 sep
@
240.094 246.144 mo
240.094 246.144 li
@
240.149 246.268 mo
240.149 246.268 li
@
240.202 246.39 mo
240.202 246.39 li
@
240.254 246.508 mo
240.254 246.508 li
1 /0 /CSD get_res sepcs
.304 sep
@
240.304 246.623 mo
240.304 246.623 li
@
240.353 246.736 mo
240.353 246.736 li
@
240.402 246.846 mo
240.402 246.846 li
1 /0 /CSD get_res sepcs
.299 sep
@
240.448 246.953 mo
240.448 246.953 li
@
240.494 247.058 mo
240.494 247.058 li
@
240.539 247.16 mo
240.539 247.16 li
1 /0 /CSD get_res sepcs
.298 sep
@
240.583 247.259 mo
240.583 247.259 li
@
240.625 247.357 mo
240.625 247.357 li
1 /0 /CSD get_res sepcs
.297 sep
@
240.667 247.451 mo
240.667 247.451 li
1 /0 /CSD get_res sepcs
.296 sep
@
240.707 247.544 mo
240.707 247.544 li
@
240.747 247.634 mo
240.747 247.634 li
1 /0 /CSD get_res sepcs
.295 sep
@
240.785 247.722 mo
240.785 247.722 li
1 /0 /CSD get_res sepcs
.294 sep
@
240.823 247.808 mo
240.823 247.808 li
@
240.859 247.892 mo
240.859 247.892 li
1 /0 /CSD get_res sepcs
.292 sep
@
240.895 247.973 mo
240.895 247.973 li
@
240.93 248.053 mo
240.93 248.053 li
1 /0 /CSD get_res sepcs
.291 sep
@
240.964 248.131 mo
240.964 248.131 li
1 /0 /CSD get_res sepcs
.29 sep
@
240.997 248.207 mo
240.997 248.207 li
@
241.03 248.281 mo
241.03 248.281 li
1 /0 /CSD get_res sepcs
.288 sep
@
241.061 248.353 mo
241.061 248.353 li
1 /0 /CSD get_res sepcs
.286 sep
@
241.098 248.437 mo
241.098 248.437 li
@
241.134 248.52 mo
241.134 248.52 li
1 /0 /CSD get_res sepcs
.284 sep
@
241.169 248.6 mo
241.169 248.6 li
1 /0 /CSD get_res sepcs
.286 sep
@
241.203 248.677 mo
241.203 248.677 li
1 /0 /CSD get_res sepcs
.283 sep
@
241.236 248.752 mo
241.236 248.752 li
@
241.268 248.825 mo
241.268 248.825 li
1 /0 /CSD get_res sepcs
.282 sep
@
241.299 248.896 mo
241.299 248.896 li
@
241.329 248.965 mo
241.329 248.965 li
1 /0 /CSD get_res sepcs
.28 sep
@
241.358 249.032 mo
241.358 249.032 li
@
241.387 249.096 mo
241.387 249.096 li
1 /0 /CSD get_res sepcs
.278 sep
@
241.414 249.159 mo
241.414 249.159 li
1 /0 /CSD get_res sepcs
.279 sep
@
241.441 249.22 mo
241.441 249.22 li
1 /0 /CSD get_res sepcs
.277 sep
@
241.467 249.279 mo
241.467 249.279 li
@
241.492 249.337 mo
241.492 249.337 li
@
241.517 249.393 mo
241.517 249.393 li
1 /0 /CSD get_res sepcs
.275 sep
@
241.54 249.447 mo
241.54 249.447 li
@
241.563 249.5 mo
241.563 249.5 li
1 /0 /CSD get_res sepcs
.273 sep
@
241.586 249.551 mo
241.586 249.551 li
@
241.607 249.6 mo
241.607 249.6 li
@
241.633 249.658 mo
241.633 249.658 li
1 /0 /CSD get_res sepcs
.27 sep
@
241.657 249.714 mo
241.657 249.714 li
@
241.681 249.767 mo
241.681 249.767 li
1 /0 /CSD get_res sepcs
.267 sep
@
241.703 249.819 mo
241.703 249.819 li
@
241.725 249.869 mo
241.725 249.869 li
@
241.746 249.917 mo
241.746 249.917 li
1 /0 /CSD get_res sepcs
.264 sep
@
241.767 249.964 mo
241.767 249.964 li
@
241.786 250.009 mo
241.786 250.009 li
@
241.805 250.052 mo
241.805 250.052 li
@
241.824 250.094 mo
241.824 250.094 li
1 /0 /CSD get_res sepcs
.261 sep
@
241.841 250.134 mo
241.841 250.134 li
@
241.858 250.173 mo
241.858 250.173 li
@
241.875 250.211 mo
241.875 250.211 li
1 /0 /CSD get_res sepcs
.258 sep
@
241.89 250.247 mo
241.89 250.247 li
@
241.906 250.282 mo
241.906 250.282 li
1 /0 /CSD get_res sepcs
.255 sep
@
241.921 250.315 mo
241.921 250.315 li
@
241.938 250.355 mo
241.938 250.355 li
1 /0 /CSD get_res sepcs
.251 sep
@
241.954 250.392 mo
241.954 250.392 li
1 /0 /CSD get_res sepcs
.252 sep
@
241.97 250.428 mo
241.97 250.428 li
1 /0 /CSD get_res sepcs
.251 sep
@
241.985 250.462 mo
241.985 250.462 li
1 /0 /CSD get_res sepcs
.248 sep
@
241.999 250.495 mo
241.999 250.495 li
1 /0 /CSD get_res sepcs
.245 sep
@
242.013 250.527 mo
242.013 250.527 li
@
242.026 250.557 mo
242.026 250.557 li
1 /0 /CSD get_res sepcs
.239 sep
@
242.039 250.586 mo
242.039 250.586 li
@
242.051 250.613 mo
242.051 250.613 li
1 /0 /CSD get_res sepcs
.237 sep
@
242.062 250.64 mo
242.062 250.64 li
1 /0 /CSD get_res sepcs
.234 sep
@
242.074 250.665 mo
242.074 250.665 li
1 /0 /CSD get_res sepcs
.232 sep
@
242.084 250.689 mo
242.084 250.689 li
1 /0 /CSD get_res sepcs
.228 sep
@
242.094 250.712 mo
242.094 250.712 li
1 /0 /CSD get_res sepcs
.223 sep
@
242.106 250.739 mo
242.106 250.739 li
1 /0 /CSD get_res sepcs
.216 sep
@
242.117 250.764 mo
242.117 250.764 li
1 /0 /CSD get_res sepcs
.212 sep
@
242.128 250.788 mo
242.128 250.788 li
1 /0 /CSD get_res sepcs
.206 sep
@
242.137 250.811 mo
242.137 250.811 li
1 /0 /CSD get_res sepcs
.198 sep
@
242.147 250.833 mo
242.147 250.833 li
1 /0 /CSD get_res sepcs
.195 sep
@
242.156 250.853 mo
242.156 250.853 li
1 /0 /CSD get_res sepcs
.193 sep
@
242.164 250.873 mo
242.164 250.873 li
1 /0 /CSD get_res sepcs
.186 sep
@
242.173 250.891 mo
242.173 250.891 li
1 /0 /CSD get_res sepcs
.182 sep
@
242.18 250.909 mo
242.18 250.909 li
1 /0 /CSD get_res sepcs
.179 sep
@
242.187 250.925 mo
242.187 250.925 li
1 /0 /CSD get_res sepcs
.171 sep
@
242.194 250.941 mo
242.194 250.941 li
1 /0 /CSD get_res sepcs
.167 sep
@
242.202 250.959 mo
242.202 250.959 li
1 /0 /CSD get_res sepcs
.16 sep
@
242.21 250.976 mo
242.21 250.976 li
1 /0 /CSD get_res sepcs
.156 sep
@
242.217 250.992 mo
242.217 250.992 li
1 /0 /CSD get_res sepcs
.149 sep
@
242.223 251.007 mo
242.223 251.007 li
1 /0 /CSD get_res sepcs
.147 sep
@
242.229 251.021 mo
242.229 251.021 li
1 /0 /CSD get_res sepcs
.137 sep
@
242.235 251.034 mo
242.235 251.034 li
1 /0 /CSD get_res sepcs
.13 sep
@
242.24 251.046 mo
242.24 251.046 li
1 /0 /CSD get_res sepcs
.128 sep
@
242.245 251.058 mo
242.245 251.058 li
1 /0 /CSD get_res sepcs
.117 sep
@
242.25 251.069 mo
242.25 251.069 li
1 /0 /CSD get_res sepcs
.115 sep
@
242.256 251.081 mo
242.256 251.081 li
1 /0 /CSD get_res sepcs
.107 sep
@
242.261 251.092 mo
242.261 251.092 li
1 /0 /CSD get_res sepcs
.098 sep
@
242.265 251.103 mo
242.265 251.103 li
1 /0 /CSD get_res sepcs
.089 sep
@
242.269 251.112 mo
242.269 251.112 li
1 /0 /CSD get_res sepcs
.08 sep
@
242.273 251.121 mo
242.273 251.121 li
1 /0 /CSD get_res sepcs
.07 sep
@
242.277 251.13 mo
242.277 251.13 li
1 /0 /CSD get_res sepcs
.06 sep
@
242.28 251.137 mo
242.28 251.137 li
1 /0 /CSD get_res sepcs
.051 sep
@
242.283 251.143 mo
242.283 251.143 li
1 /0 /CSD get_res sepcs
.047 sep
@
230.716 224.724 mo
230.716 224.724 li
230.728 224.751 li
230.751 224.803 li
230.774 224.855 li
230.802 224.921 li
230.944 225.245 li
231.085 225.566 li
1 /0 /CSD get_res sepcs
.379 sep
@
231.085 225.566 mo
231.275 226.001 li
231.463 226.43 li
1 /0 /CSD get_res sepcs
.376 sep
@
231.463 226.43 mo
231.647 226.851 li
231.829 227.265 li
232.007 227.672 li
1 /0 /CSD get_res sepcs
.374 sep
@
232.007 227.672 mo
232.182 228.073 li
232.354 228.466 li
1 /0 /CSD get_res sepcs
.371 sep
@
232.354 228.466 mo
232.524 228.853 li
232.69 229.233 li
1 /0 /CSD get_res sepcs
.372 sep
@
232.69 229.233 mo
232.854 229.606 li
233.015 229.974 li
233.173 230.335 li
1 /0 /CSD get_res sepcs
.369 sep
@
233.173 230.335 mo
233.328 230.69 li
233.481 231.039 li
1 /0 /CSD get_res sepcs
.366 sep
@
233.481 231.039 mo
233.631 231.382 li
233.779 231.719 li
1 /0 /CSD get_res sepcs
.363 sep
@
233.779 231.719 mo
233.924 232.05 li
234.066 232.376 li
1 /0 /CSD get_res sepcs
.364 sep
@
234.066 232.376 mo
234.207 232.696 li
234.344 233.011 li
234.48 233.321 li
1 /0 /CSD get_res sepcs
.362 sep
@
234.48 233.321 mo
234.613 233.625 li
234.744 233.924 li
1 /0 /CSD get_res sepcs
.359 sep
@
234.744 233.924 mo
234.873 234.218 li
234.999 234.507 li
@
234.999 234.507 mo
235.124 234.791 li
235.246 235.07 li
235.366 235.345 li
1 /0 /CSD get_res sepcs
.356 sep
@
235.366 235.345 mo
235.484 235.615 li
235.6 235.88 li
1 /0 /CSD get_res sepcs
.353 sep
@
235.6 235.88 mo
235.715 236.141 li
235.827 236.397 li
1 /0 /CSD get_res sepcs
.354 sep
@
235.827 236.397 mo
235.937 236.649 li
236.046 236.897 li
1 /0 /CSD get_res sepcs
.351 sep
@
236.046 236.897 mo
236.152 237.14 li
236.257 237.38 li
236.36 237.615 li
@
236.36 237.615 mo
236.461 237.846 li
236.561 238.074 li
1 /0 /CSD get_res sepcs
.348 sep
@
236.561 238.074 mo
236.659 238.297 li
236.755 238.517 li
@
236.755 238.517 mo
236.849 238.733 li
236.942 238.945 li
237.034 239.154 li
1 /0 /CSD get_res sepcs
.345 sep
@
237.034 239.154 mo
237.124 239.359 li
237.212 239.561 li
1 /0 /CSD get_res sepcs
.341 sep
@
237.212 239.561 mo
237.299 239.759 li
237.384 239.954 li
@
237.384 239.954 mo
237.468 240.146 li
237.55 240.334 li
1 /0 /CSD get_res sepcs
.338 sep
@
237.55 240.334 mo
237.631 240.519 li
237.711 240.701 li
237.789 240.88 li
@
237.789 240.88 mo
237.866 241.056 li
237.942 241.229 li
1 /0 /CSD get_res sepcs
.335 sep
@
237.942 241.229 mo
238.017 241.399 li
238.09 241.566 li
@
238.09 241.566 mo
238.162 241.73 li
238.232 241.891 li
238.302 242.05 li
1 /0 /CSD get_res sepcs
.332 sep
@
238.302 242.05 mo
238.37 242.206 li
238.437 242.359 li
@
238.437 242.359 mo
238.516 242.54 li
238.594 242.717 li
1 /0 /CSD get_res sepcs
.329 sep
@
238.594 242.717 mo
238.67 242.891 li
238.744 243.061 li
@
238.744 243.061 mo
238.817 243.227 li
238.889 243.391 li
1 /0 /CSD get_res sepcs
.326 sep
@
238.889 243.391 mo
238.959 243.55 li
239.027 243.707 li
1 /0 /CSD get_res sepcs
.323 sep
@
239.027 243.707 mo
239.094 243.86 li
@
239.094 243.86 mo
239.16 244.011 li
239.225 244.158 li
1 /0 /CSD get_res sepcs
.32 sep
@
239.225 244.158 mo
239.288 244.302 li
239.35 244.443 li
@
239.35 244.443 mo
239.41 244.582 li
239.469 244.717 li
1 /0 /CSD get_res sepcs
.317 sep
@
239.469 244.717 mo
239.528 244.85 li
239.585 244.98 li
@
239.585 244.98 mo
239.64 245.108 li
239.695 245.232 li
1 /0 /CSD get_res sepcs
.314 sep
@
239.695 245.232 mo
239.749 245.355 li
239.801 245.475 li
1 /0 /CSD get_res sepcs
.313 sep
@
239.801 245.475 mo
239.852 245.592 li
239.903 245.707 li
1 /0 /CSD get_res sepcs
.31 sep
@
239.903 245.707 mo
239.952 245.82 li
240 245.93 li
1 /0 /CSD get_res sepcs
.309 sep
@
240 245.93 mo
240.048 246.038 li
@
240.048 246.038 mo
240.094 246.144 li
240.149 246.268 li
1 /0 /CSD get_res sepcs
.305 sep
@
240.149 246.268 mo
240.202 246.39 li
240.254 246.508 li
@
240.254 246.508 mo
240.304 246.623 li
1 /0 /CSD get_res sepcs
.304 sep
@
240.304 246.623 mo
240.353 246.736 li
240.402 246.846 li
@
240.402 246.846 mo
240.448 246.953 li
240.494 247.058 li
1 /0 /CSD get_res sepcs
.299 sep
@
240.494 247.058 mo
240.539 247.16 li
@
240.539 247.16 mo
240.583 247.259 li
240.625 247.357 li
1 /0 /CSD get_res sepcs
.298 sep
@
240.625 247.357 mo
240.667 247.451 li
1 /0 /CSD get_res sepcs
.297 sep
@
240.667 247.451 mo
240.707 247.544 li
240.747 247.634 li
1 /0 /CSD get_res sepcs
.296 sep
@
240.747 247.634 mo
240.785 247.722 li
1 /0 /CSD get_res sepcs
.295 sep
@
240.785 247.722 mo
240.823 247.808 li
240.859 247.892 li
1 /0 /CSD get_res sepcs
.294 sep
@
240.859 247.892 mo
240.895 247.973 li
240.93 248.053 li
1 /0 /CSD get_res sepcs
.292 sep
@
240.93 248.053 mo
240.964 248.131 li
1 /0 /CSD get_res sepcs
.291 sep
@
240.964 248.131 mo
240.997 248.207 li
241.03 248.281 li
1 /0 /CSD get_res sepcs
.29 sep
@
241.03 248.281 mo
241.061 248.353 li
1 /0 /CSD get_res sepcs
.288 sep
@
241.061 248.353 mo
241.098 248.437 li
241.134 248.52 li
1 /0 /CSD get_res sepcs
.286 sep
@
241.134 248.52 mo
241.169 248.6 li
1 /0 /CSD get_res sepcs
.284 sep
@
241.169 248.6 mo
241.203 248.677 li
1 /0 /CSD get_res sepcs
.286 sep
@
241.203 248.677 mo
241.236 248.752 li
241.268 248.825 li
1 /0 /CSD get_res sepcs
.283 sep
@
241.268 248.825 mo
241.299 248.896 li
1 /0 /CSD get_res sepcs
.282 sep
@
241.299 248.896 mo
241.329 248.965 li
@
241.329 248.965 mo
241.358 249.032 li
241.387 249.096 li
1 /0 /CSD get_res sepcs
.28 sep
@
241.387 249.096 mo
241.414 249.159 li
1 /0 /CSD get_res sepcs
.278 sep
@
241.414 249.159 mo
241.441 249.22 li
1 /0 /CSD get_res sepcs
.279 sep
@
241.441 249.22 mo
241.467 249.279 li
1 /0 /CSD get_res sepcs
.277 sep
@
241.467 249.279 mo
241.492 249.337 li
241.517 249.393 li
@
241.517 249.393 mo
241.54 249.447 li
1 /0 /CSD get_res sepcs
.275 sep
@
241.54 249.447 mo
241.563 249.5 li
@
241.563 249.5 mo
241.586 249.551 li
241.607 249.6 li
1 /0 /CSD get_res sepcs
.273 sep
@
241.607 249.6 mo
241.633 249.658 li
@
241.633 249.658 mo
241.657 249.714 li
1 /0 /CSD get_res sepcs
.27 sep
@
241.657 249.714 mo
241.681 249.767 li
@
241.681 249.767 mo
241.703 249.819 li
1 /0 /CSD get_res sepcs
.267 sep
@
241.703 249.819 mo
241.725 249.869 li
@
241.725 249.869 mo
241.746 249.917 li
@
241.746 249.917 mo
241.767 249.964 li
1 /0 /CSD get_res sepcs
.264 sep
@
241.767 249.964 mo
241.786 250.009 li
241.805 250.052 li
@
241.805 250.052 mo
241.824 250.094 li
@
241.824 250.094 mo
241.841 250.134 li
1 /0 /CSD get_res sepcs
.261 sep
@
241.841 250.134 mo
241.858 250.173 li
@
241.858 250.173 mo
241.875 250.211 li
@
241.875 250.211 mo
241.89 250.247 li
1 /0 /CSD get_res sepcs
.258 sep
@
241.89 250.247 mo
241.906 250.282 li
@
241.906 250.282 mo
241.921 250.315 li
1 /0 /CSD get_res sepcs
.255 sep
@
241.921 250.315 mo
241.938 250.355 li
@
241.938 250.355 mo
241.954 250.392 li
1 /0 /CSD get_res sepcs
.251 sep
@
241.954 250.392 mo
241.97 250.428 li
1 /0 /CSD get_res sepcs
.252 sep
@
241.97 250.428 mo
241.985 250.462 li
1 /0 /CSD get_res sepcs
.251 sep
@
241.985 250.462 mo
241.999 250.495 li
1 /0 /CSD get_res sepcs
.248 sep
@
241.999 250.495 mo
242.013 250.527 li
1 /0 /CSD get_res sepcs
.245 sep
@
242.013 250.527 mo
242.026 250.557 li
@
242.026 250.557 mo
242.039 250.586 li
1 /0 /CSD get_res sepcs
.239 sep
@
242.039 250.586 mo
242.051 250.613 li
@
242.051 250.613 mo
242.062 250.64 li
1 /0 /CSD get_res sepcs
.237 sep
@
242.062 250.64 mo
242.074 250.665 li
1 /0 /CSD get_res sepcs
.234 sep
@
242.074 250.665 mo
242.084 250.689 li
1 /0 /CSD get_res sepcs
.232 sep
@
242.084 250.689 mo
242.094 250.712 li
1 /0 /CSD get_res sepcs
.228 sep
@
242.094 250.712 mo
242.106 250.739 li
1 /0 /CSD get_res sepcs
.223 sep
@
242.106 250.739 mo
242.117 250.764 li
1 /0 /CSD get_res sepcs
.216 sep
@
242.117 250.764 mo
242.128 250.788 li
1 /0 /CSD get_res sepcs
.212 sep
@
242.128 250.788 mo
242.137 250.811 li
1 /0 /CSD get_res sepcs
.206 sep
@
242.137 250.811 mo
242.147 250.833 li
1 /0 /CSD get_res sepcs
.198 sep
@
242.147 250.833 mo
242.156 250.853 li
1 /0 /CSD get_res sepcs
.195 sep
@
242.156 250.853 mo
242.164 250.873 li
1 /0 /CSD get_res sepcs
.193 sep
@
242.164 250.873 mo
242.173 250.891 li
1 /0 /CSD get_res sepcs
.186 sep
@
242.173 250.891 mo
242.18 250.909 li
1 /0 /CSD get_res sepcs
.182 sep
@
242.18 250.909 mo
242.187 250.925 li
1 /0 /CSD get_res sepcs
.179 sep
@
242.187 250.925 mo
242.194 250.941 li
1 /0 /CSD get_res sepcs
.171 sep
@
242.194 250.941 mo
242.202 250.959 li
1 /0 /CSD get_res sepcs
.167 sep
@
242.202 250.959 mo
242.21 250.976 li
1 /0 /CSD get_res sepcs
.16 sep
@
242.21 250.976 mo
242.217 250.992 li
1 /0 /CSD get_res sepcs
.156 sep
@
242.217 250.992 mo
242.223 251.007 li
1 /0 /CSD get_res sepcs
.149 sep
@
242.223 251.007 mo
242.229 251.021 li
1 /0 /CSD get_res sepcs
.147 sep
@
242.229 251.021 mo
242.235 251.034 li
1 /0 /CSD get_res sepcs
.137 sep
@
242.235 251.034 mo
242.24 251.046 li
1 /0 /CSD get_res sepcs
.13 sep
@
242.24 251.046 mo
242.245 251.058 li
1 /0 /CSD get_res sepcs
.128 sep
@
242.245 251.058 mo
242.25 251.069 li
1 /0 /CSD get_res sepcs
.117 sep
@
242.25 251.069 mo
242.256 251.081 li
1 /0 /CSD get_res sepcs
.115 sep
@
242.256 251.081 mo
242.261 251.092 li
1 /0 /CSD get_res sepcs
.107 sep
@
242.261 251.092 mo
242.265 251.103 li
1 /0 /CSD get_res sepcs
.098 sep
@
242.265 251.103 mo
242.269 251.112 li
1 /0 /CSD get_res sepcs
.089 sep
@
242.269 251.112 mo
242.273 251.121 li
1 /0 /CSD get_res sepcs
.08 sep
@
242.273 251.121 mo
242.277 251.13 li
1 /0 /CSD get_res sepcs
.07 sep
@
242.277 251.13 mo
242.28 251.137 li
1 /0 /CSD get_res sepcs
.06 sep
@
242.28 251.137 mo
242.283 251.143 li
1 /0 /CSD get_res sepcs
.051 sep
@
230.716 224.724 mo
230.716 224.724 li
230.728 224.751 li
230.751 224.803 li
230.774 224.855 li
230.802 224.921 li
230.944 225.245 li
231.085 225.566 li
1 /0 /CSD get_res sepcs
.379 sep
@
231.085 225.566 mo
231.275 226.001 li
231.463 226.43 li
1 /0 /CSD get_res sepcs
.376 sep
@
231.463 226.43 mo
231.647 226.851 li
231.829 227.265 li
232.007 227.672 li
1 /0 /CSD get_res sepcs
.374 sep
@
232.007 227.672 mo
232.182 228.073 li
232.354 228.466 li
1 /0 /CSD get_res sepcs
.371 sep
@
232.354 228.466 mo
232.524 228.853 li
232.69 229.233 li
1 /0 /CSD get_res sepcs
.372 sep
@
232.69 229.233 mo
232.854 229.606 li
233.015 229.974 li
233.173 230.335 li
1 /0 /CSD get_res sepcs
.369 sep
@
233.173 230.335 mo
233.328 230.69 li
233.481 231.039 li
1 /0 /CSD get_res sepcs
.366 sep
@
233.481 231.039 mo
233.631 231.382 li
233.779 231.719 li
1 /0 /CSD get_res sepcs
.363 sep
@
233.779 231.719 mo
233.924 232.05 li
234.066 232.376 li
1 /0 /CSD get_res sepcs
.364 sep
@
234.066 232.376 mo
234.207 232.696 li
234.344 233.011 li
234.48 233.321 li
1 /0 /CSD get_res sepcs
.362 sep
@
234.48 233.321 mo
234.613 233.625 li
234.744 233.924 li
1 /0 /CSD get_res sepcs
.359 sep
@
234.744 233.924 mo
234.873 234.218 li
234.999 234.507 li
@
234.999 234.507 mo
235.124 234.791 li
235.246 235.07 li
235.366 235.345 li
1 /0 /CSD get_res sepcs
.356 sep
@
235.366 235.345 mo
235.484 235.615 li
235.6 235.88 li
1 /0 /CSD get_res sepcs
.353 sep
@
235.6 235.88 mo
235.715 236.141 li
235.827 236.397 li
1 /0 /CSD get_res sepcs
.354 sep
@
235.827 236.397 mo
235.937 236.649 li
236.046 236.897 li
1 /0 /CSD get_res sepcs
.351 sep
@
236.046 236.897 mo
236.152 237.14 li
236.257 237.38 li
236.36 237.615 li
@
236.36 237.615 mo
236.461 237.846 li
236.561 238.074 li
1 /0 /CSD get_res sepcs
.348 sep
@
236.561 238.074 mo
236.659 238.297 li
236.755 238.517 li
@
236.755 238.517 mo
236.849 238.733 li
236.942 238.945 li
237.034 239.154 li
1 /0 /CSD get_res sepcs
.345 sep
@
237.034 239.154 mo
237.124 239.359 li
237.212 239.561 li
1 /0 /CSD get_res sepcs
.341 sep
@
237.212 239.561 mo
237.299 239.759 li
237.384 239.954 li
@
237.384 239.954 mo
237.468 240.146 li
237.55 240.334 li
1 /0 /CSD get_res sepcs
.338 sep
@
237.55 240.334 mo
237.631 240.519 li
237.711 240.701 li
237.789 240.88 li
@
237.789 240.88 mo
237.866 241.056 li
237.942 241.229 li
1 /0 /CSD get_res sepcs
.335 sep
@
237.942 241.229 mo
238.017 241.399 li
238.09 241.566 li
@
238.09 241.566 mo
238.162 241.73 li
238.232 241.891 li
238.302 242.05 li
1 /0 /CSD get_res sepcs
.332 sep
@
238.302 242.05 mo
238.37 242.206 li
238.437 242.359 li
@
238.437 242.359 mo
238.516 242.54 li
238.594 242.717 li
1 /0 /CSD get_res sepcs
.329 sep
@
238.594 242.717 mo
238.67 242.891 li
238.744 243.061 li
@
238.744 243.061 mo
238.817 243.227 li
238.889 243.391 li
1 /0 /CSD get_res sepcs
.326 sep
@
238.889 243.391 mo
238.959 243.55 li
239.027 243.707 li
1 /0 /CSD get_res sepcs
.323 sep
@
239.027 243.707 mo
239.094 243.86 li
@
239.094 243.86 mo
239.16 244.011 li
239.225 244.158 li
1 /0 /CSD get_res sepcs
.32 sep
@
239.225 244.158 mo
239.288 244.302 li
239.35 244.443 li
@
239.35 244.443 mo
239.41 244.582 li
239.469 244.717 li
1 /0 /CSD get_res sepcs
.317 sep
@
239.469 244.717 mo
239.528 244.85 li
239.585 244.98 li
@
239.585 244.98 mo
239.64 245.108 li
239.695 245.232 li
1 /0 /CSD get_res sepcs
.314 sep
@
239.695 245.232 mo
239.749 245.355 li
239.801 245.475 li
1 /0 /CSD get_res sepcs
.313 sep
@
239.801 245.475 mo
239.852 245.592 li
239.903 245.707 li
1 /0 /CSD get_res sepcs
.31 sep
@
239.903 245.707 mo
239.952 245.82 li
240 245.93 li
1 /0 /CSD get_res sepcs
.309 sep
@
240 245.93 mo
240.048 246.038 li
@
240.048 246.038 mo
240.094 246.144 li
240.149 246.268 li
1 /0 /CSD get_res sepcs
.305 sep
@
240.149 246.268 mo
240.202 246.39 li
240.254 246.508 li
@
240.254 246.508 mo
240.304 246.623 li
1 /0 /CSD get_res sepcs
.304 sep
@
240.304 246.623 mo
240.353 246.736 li
240.402 246.846 li
@
240.402 246.846 mo
240.448 246.953 li
240.494 247.058 li
1 /0 /CSD get_res sepcs
.299 sep
@
240.494 247.058 mo
240.539 247.16 li
@
240.539 247.16 mo
240.583 247.259 li
240.625 247.357 li
1 /0 /CSD get_res sepcs
.298 sep
@
240.625 247.357 mo
240.667 247.451 li
1 /0 /CSD get_res sepcs
.297 sep
@
240.667 247.451 mo
240.707 247.544 li
240.747 247.634 li
1 /0 /CSD get_res sepcs
.296 sep
@
240.747 247.634 mo
240.785 247.722 li
1 /0 /CSD get_res sepcs
.295 sep
@
240.785 247.722 mo
240.823 247.808 li
240.859 247.892 li
1 /0 /CSD get_res sepcs
.294 sep
@
240.859 247.892 mo
240.895 247.973 li
240.93 248.053 li
1 /0 /CSD get_res sepcs
.292 sep
@
240.93 248.053 mo
240.964 248.131 li
1 /0 /CSD get_res sepcs
.291 sep
@
240.964 248.131 mo
240.997 248.207 li
241.03 248.281 li
1 /0 /CSD get_res sepcs
.29 sep
@
241.03 248.281 mo
241.061 248.353 li
1 /0 /CSD get_res sepcs
.288 sep
@
241.061 248.353 mo
241.098 248.437 li
241.134 248.52 li
1 /0 /CSD get_res sepcs
.286 sep
@
241.134 248.52 mo
241.169 248.6 li
1 /0 /CSD get_res sepcs
.284 sep
@
241.169 248.6 mo
241.203 248.677 li
1 /0 /CSD get_res sepcs
.286 sep
@
241.203 248.677 mo
241.236 248.752 li
241.268 248.825 li
1 /0 /CSD get_res sepcs
.283 sep
@
241.268 248.825 mo
241.299 248.896 li
1 /0 /CSD get_res sepcs
.282 sep
@
241.299 248.896 mo
241.329 248.965 li
@
241.329 248.965 mo
241.358 249.032 li
241.387 249.096 li
1 /0 /CSD get_res sepcs
.28 sep
@
241.387 249.096 mo
241.414 249.159 li
1 /0 /CSD get_res sepcs
.278 sep
@
241.414 249.159 mo
241.441 249.22 li
1 /0 /CSD get_res sepcs
.279 sep
@
241.441 249.22 mo
241.467 249.279 li
1 /0 /CSD get_res sepcs
.277 sep
@
241.467 249.279 mo
241.492 249.337 li
241.517 249.393 li
@
241.517 249.393 mo
241.54 249.447 li
1 /0 /CSD get_res sepcs
.275 sep
@
241.54 249.447 mo
241.563 249.5 li
@
241.563 249.5 mo
241.586 249.551 li
241.607 249.6 li
1 /0 /CSD get_res sepcs
.273 sep
@
241.607 249.6 mo
241.633 249.658 li
@
241.633 249.658 mo
241.657 249.714 li
1 /0 /CSD get_res sepcs
.27 sep
@
241.657 249.714 mo
241.681 249.767 li
@
241.681 249.767 mo
241.703 249.819 li
1 /0 /CSD get_res sepcs
.267 sep
@
241.703 249.819 mo
241.725 249.869 li
@
241.725 249.869 mo
241.746 249.917 li
@
241.746 249.917 mo
241.767 249.964 li
1 /0 /CSD get_res sepcs
.264 sep
@
241.767 249.964 mo
241.786 250.009 li
241.805 250.052 li
@
241.805 250.052 mo
241.824 250.094 li
@
241.824 250.094 mo
241.841 250.134 li
1 /0 /CSD get_res sepcs
.261 sep
@
241.841 250.134 mo
241.858 250.173 li
@
241.858 250.173 mo
241.875 250.211 li
@
241.875 250.211 mo
241.89 250.247 li
1 /0 /CSD get_res sepcs
.258 sep
@
241.89 250.247 mo
241.906 250.282 li
@
241.906 250.282 mo
241.921 250.315 li
1 /0 /CSD get_res sepcs
.255 sep
@
241.921 250.315 mo
241.938 250.355 li
@
241.938 250.355 mo
241.954 250.392 li
1 /0 /CSD get_res sepcs
.251 sep
@
241.954 250.392 mo
241.97 250.428 li
1 /0 /CSD get_res sepcs
.252 sep
@
241.97 250.428 mo
241.985 250.462 li
1 /0 /CSD get_res sepcs
.251 sep
@
241.985 250.462 mo
241.999 250.495 li
1 /0 /CSD get_res sepcs
.248 sep
@
241.999 250.495 mo
242.013 250.527 li
1 /0 /CSD get_res sepcs
.245 sep
@
242.013 250.527 mo
242.026 250.557 li
@
242.026 250.557 mo
242.039 250.586 li
1 /0 /CSD get_res sepcs
.239 sep
@
242.039 250.586 mo
242.051 250.613 li
@
242.051 250.613 mo
242.062 250.64 li
1 /0 /CSD get_res sepcs
.237 sep
@
242.062 250.64 mo
242.074 250.665 li
1 /0 /CSD get_res sepcs
.234 sep
@
242.074 250.665 mo
242.084 250.689 li
1 /0 /CSD get_res sepcs
.232 sep
@
242.084 250.689 mo
242.094 250.712 li
1 /0 /CSD get_res sepcs
.228 sep
@
242.094 250.712 mo
242.106 250.739 li
1 /0 /CSD get_res sepcs
.223 sep
@
242.106 250.739 mo
242.117 250.764 li
1 /0 /CSD get_res sepcs
.216 sep
@
242.117 250.764 mo
242.128 250.788 li
1 /0 /CSD get_res sepcs
.212 sep
@
242.128 250.788 mo
242.137 250.811 li
1 /0 /CSD get_res sepcs
.206 sep
@
242.137 250.811 mo
242.147 250.833 li
1 /0 /CSD get_res sepcs
.198 sep
@
242.147 250.833 mo
242.156 250.853 li
1 /0 /CSD get_res sepcs
.195 sep
@
242.156 250.853 mo
242.164 250.873 li
1 /0 /CSD get_res sepcs
.193 sep
@
242.164 250.873 mo
242.173 250.891 li
1 /0 /CSD get_res sepcs
.186 sep
@
242.173 250.891 mo
242.18 250.909 li
1 /0 /CSD get_res sepcs
.182 sep
@
242.18 250.909 mo
242.187 250.925 li
1 /0 /CSD get_res sepcs
.179 sep
@
242.187 250.925 mo
242.194 250.941 li
1 /0 /CSD get_res sepcs
.171 sep
@
242.194 250.941 mo
242.202 250.959 li
1 /0 /CSD get_res sepcs
.167 sep
@
242.202 250.959 mo
242.21 250.976 li
1 /0 /CSD get_res sepcs
.16 sep
@
242.21 250.976 mo
242.217 250.992 li
1 /0 /CSD get_res sepcs
.156 sep
@
242.217 250.992 mo
242.223 251.007 li
1 /0 /CSD get_res sepcs
.149 sep
@
242.223 251.007 mo
242.229 251.021 li
1 /0 /CSD get_res sepcs
.147 sep
@
242.229 251.021 mo
242.235 251.034 li
1 /0 /CSD get_res sepcs
.137 sep
@
242.235 251.034 mo
242.24 251.046 li
1 /0 /CSD get_res sepcs
.13 sep
@
242.24 251.046 mo
242.245 251.058 li
1 /0 /CSD get_res sepcs
.128 sep
@
242.245 251.058 mo
242.25 251.069 li
1 /0 /CSD get_res sepcs
.117 sep
@
242.25 251.069 mo
242.256 251.081 li
1 /0 /CSD get_res sepcs
.115 sep
@
242.256 251.081 mo
242.261 251.092 li
1 /0 /CSD get_res sepcs
.107 sep
@
242.261 251.092 mo
242.265 251.103 li
1 /0 /CSD get_res sepcs
.098 sep
@
242.265 251.103 mo
242.269 251.112 li
1 /0 /CSD get_res sepcs
.089 sep
@
242.269 251.112 mo
242.273 251.121 li
1 /0 /CSD get_res sepcs
.08 sep
@
242.273 251.121 mo
242.277 251.13 li
1 /0 /CSD get_res sepcs
.07 sep
@
242.277 251.13 mo
242.28 251.137 li
1 /0 /CSD get_res sepcs
.06 sep
@
242.28 251.137 mo
242.283 251.143 li
1 /0 /CSD get_res sepcs
.051 sep
@
2 lj
[10 6 ] 0 dsh
230.716 224.724 mo
230.716 224.724 li
230.716 224.724 mo
230.716 224.724 li
230.716 224.724 mo
230.716 224.724 li
230.716 224.724 mo
230.716 224.724 li
1 /0 /CSD get_res sepcs
.379 sep
@
0 lj
[] 0 dsh
230.716 221.724 mo
230.716 227.724 li
@
227.716 224.724 mo
233.716 224.724 li
@
228.595 222.603 mo
232.837 226.845 li
@
228.595 226.845 mo
232.837 222.603 li
@
230.716 221.724 mo
230.716 227.724 li
@
227.716 224.724 mo
233.716 224.724 li
@
228.595 222.603 mo
232.837 226.845 li
@
228.595 226.845 mo
232.837 222.603 li
@
230.716 221.724 mo
230.716 227.724 li
@
227.716 224.724 mo
233.716 224.724 li
@
228.595 222.603 mo
232.837 226.845 li
@
228.595 226.845 mo
232.837 222.603 li
@
230.716 221.724 mo
230.716 227.724 li
@
227.716 224.724 mo
233.716 224.724 li
@
228.595 222.603 mo
232.837 226.845 li
@
228.595 226.845 mo
232.837 222.603 li
@
1 lj
271.265 251.236 mo
271.208 249.419 li
271.036 247.609 li
265.378 212.913 216.91 214.437 213.439 249.419 cv
213.382 251.236 li
213.439 253.053 li
216.91 288.035 265.378 289.559 271.036 254.863 cv
271.208 253.053 li
271.265 251.236 li
1 /0 /CSD get_res sepcs
.582 sep
@
208.559 116.177 mo
208.549 115.874 li
208.521 115.573 li
207.577 109.79 199.501 110.044 198.921 115.874 cv
198.912 116.177 li
198.921 116.48 li
199.5 122.31 207.576 122.565 208.521 116.782 cv
208.549 116.48 li
208.559 116.177 li
1 /0 /CSD get_res sepcs
.262 sep
@
246.87 258.611 mo
246.797 258.611 246.76 258.569 246.76 258.486 cv
246.76 258.434 246.77 258.403 246.791 258.392 cv
247.041 257.955 247.341 257.538 247.69 257.142 cv
248.039 256.747 248.44 256.348 248.893 255.947 cv
249.346 255.546 249.799 255.143 250.252 254.736 cv
250.705 254.33 251.073 253.971 251.354 253.658 cv
251.291 253.658 li
251.094 253.658 250.794 253.59 250.393 253.455 cv
249.992 253.32 249.682 253.252 249.463 253.252 cv
249.213 253.252 248.971 253.307 248.737 253.416 cv
248.502 253.525 248.354 253.689 248.291 253.908 cv
248.281 253.981 248.245 254.017 248.182 254.017 cv
248.01 254.017 li
247.937 254.017 247.901 253.97 247.901 253.877 cv
247.901 253.83 li
247.974 253.559 248.093 253.304 248.26 253.064 cv
248.427 252.825 248.632 252.632 248.877 252.486 cv
249.122 252.34 249.375 252.267 249.635 252.267 cv
249.822 252.267 249.979 252.309 250.104 252.392 cv
250.229 252.475 250.372 252.606 250.534 252.783 cv
250.695 252.96 250.828 253.088 250.932 253.166 cv
251.036 253.244 251.166 253.283 251.323 253.283 cv
251.531 253.283 251.716 253.189 251.877 253.002 cv
252.039 252.815 252.198 252.585 252.354 252.314 cv
252.385 252.283 252.422 252.267 252.463 252.267 cv
252.62 252.267 li
252.651 252.267 252.677 252.278 252.698 252.299 cv
252.719 252.32 252.729 252.351 252.729 252.392 cv
252.729 252.423 252.719 252.455 252.698 252.486 cv
252.448 252.913 252.156 253.314 251.823 253.689 cv
251.49 254.064 251.052 254.497 250.51 254.986 cv
249.969 255.476 249.513 255.888 249.143 256.221 cv
248.773 256.554 248.427 256.898 248.104 257.252 cv
248.177 257.231 248.276 257.221 248.401 257.221 cv
248.63 257.221 248.94 257.286 249.33 257.416 cv
249.721 257.546 250.026 257.611 250.245 257.611 cv
250.474 257.611 250.708 257.562 250.948 257.463 cv
251.187 257.364 251.393 257.223 251.565 257.041 cv
251.737 256.858 251.854 256.647 251.916 256.408 cv
251.937 256.345 251.974 256.314 252.026 256.314 cv
252.198 256.314 li
252.229 256.314 252.255 256.33 252.276 256.361 cv
252.297 256.392 252.307 256.424 252.307 256.455 cv
252.307 256.466 252.307 256.476 252.307 256.486 cv
252.213 256.851 252.059 257.192 251.846 257.51 cv
251.633 257.827 251.37 258.09 251.057 258.299 cv
250.744 258.507 250.411 258.611 250.057 258.611 cv
249.88 258.611 249.729 258.569 249.604 258.486 cv
249.479 258.403 249.333 258.273 249.166 258.096 cv
248.999 257.919 248.864 257.788 248.76 257.705 cv
248.656 257.622 248.531 257.58 248.385 257.58 cv
247.916 257.58 247.5 257.908 247.135 258.564 cv
247.104 258.595 247.072 258.611 247.041 258.611 cv
246.87 258.611 li
1 /0 /CSD get_res sepcs
1 sep
f
254.246 252.109 mo
254.173 252.109 254.108 252.078 254.051 252.015 cv
253.994 251.952 253.965 251.879 253.965 251.796 cv
253.965 251.681 254.012 251.603 254.105 251.562 cv
255.543 250.874 li
254.105 250.203 li
254.012 250.161 253.965 250.078 253.965 249.953 cv
253.965 249.88 253.994 249.812 254.051 249.749 cv
254.108 249.687 254.173 249.656 254.246 249.656 cv
254.298 249.656 254.345 249.672 254.387 249.703 cv
255.668 250.64 li
255.527 248.999 li
255.527 248.916 255.553 248.848 255.605 248.796 cv
255.657 248.744 255.725 248.718 255.808 248.718 cv
255.891 248.718 255.959 248.744 256.012 248.796 cv
256.064 248.848 256.09 248.911 256.09 248.984 cv
256.09 248.999 li
255.933 250.64 li
257.215 249.703 li
257.256 249.672 257.303 249.656 257.355 249.656 cv
257.438 249.656 257.509 249.687 257.566 249.749 cv
257.623 249.812 257.652 249.88 257.652 249.953 cv
257.652 250.078 257.605 250.161 257.512 250.203 cv
256.074 250.874 li
257.512 251.562 li
257.605 251.603 257.652 251.681 257.652 251.796 cv
257.652 251.879 257.623 251.952 257.566 252.015 cv
257.509 252.078 257.438 252.109 257.355 252.109 cv
257.303 252.109 257.256 252.093 257.215 252.062 cv
255.933 251.124 li
256.09 252.749 li
256.09 252.781 li
256.09 252.854 256.061 252.913 256.004 252.96 cv
255.947 253.007 255.881 253.031 255.808 253.031 cv
255.735 253.031 255.67 253.005 255.613 252.953 cv
255.556 252.9 255.527 252.832 255.527 252.749 cv
255.668 251.124 li
254.387 252.062 li
254.345 252.093 254.298 252.109 254.246 252.109 cv
f
208.282 123.615 mo
208.209 123.615 208.172 123.573 208.172 123.49 cv
208.172 123.438 208.182 123.407 208.203 123.396 cv
208.453 122.959 208.753 122.542 209.102 122.146 cv
209.451 121.751 209.852 121.352 210.305 120.951 cv
210.758 120.55 211.211 120.147 211.664 119.74 cv
212.117 119.334 212.485 118.975 212.766 118.662 cv
212.703 118.662 li
212.506 118.662 212.206 118.594 211.805 118.459 cv
211.404 118.324 211.094 118.256 210.875 118.256 cv
210.625 118.256 210.383 118.311 210.149 118.42 cv
209.914 118.529 209.766 118.693 209.703 118.912 cv
209.693 118.985 209.657 119.021 209.594 119.021 cv
209.422 119.021 li
209.349 119.021 209.313 118.974 209.313 118.881 cv
209.313 118.834 li
209.386 118.563 209.505 118.308 209.672 118.068 cv
209.839 117.829 210.044 117.636 210.289 117.49 cv
210.534 117.344 210.787 117.271 211.047 117.271 cv
211.234 117.271 211.391 117.313 211.516 117.396 cv
211.641 117.479 211.784 117.61 211.946 117.787 cv
212.107 117.964 212.24 118.092 212.344 118.17 cv
212.448 118.248 212.578 118.287 212.735 118.287 cv
212.943 118.287 213.128 118.193 213.289 118.006 cv
213.451 117.819 213.61 117.589 213.766 117.318 cv
213.797 117.287 213.834 117.271 213.875 117.271 cv
214.032 117.271 li
214.063 117.271 214.089 117.282 214.11 117.303 cv
214.131 117.324 214.141 117.355 214.141 117.396 cv
214.141 117.427 214.131 117.459 214.11 117.49 cv
213.86 117.917 213.568 118.318 213.235 118.693 cv
212.902 119.068 212.464 119.501 211.922 119.99 cv
211.381 120.48 210.925 120.892 210.555 121.225 cv
210.185 121.558 209.839 121.902 209.516 122.256 cv
209.589 122.235 209.688 122.225 209.813 122.225 cv
210.042 122.225 210.352 122.29 210.742 122.42 cv
211.133 122.55 211.438 122.615 211.657 122.615 cv
211.886 122.615 212.12 122.566 212.36 122.467 cv
212.599 122.368 212.805 122.227 212.977 122.045 cv
213.149 121.862 213.266 121.651 213.328 121.412 cv
213.349 121.349 213.386 121.318 213.438 121.318 cv
213.61 121.318 li
213.641 121.318 213.667 121.334 213.688 121.365 cv
213.709 121.396 213.719 121.428 213.719 121.459 cv
213.719 121.47 213.719 121.48 213.719 121.49 cv
213.625 121.855 213.471 122.196 213.258 122.514 cv
213.045 122.831 212.782 123.094 212.469 123.303 cv
212.156 123.511 211.823 123.615 211.469 123.615 cv
211.292 123.615 211.141 123.573 211.016 123.49 cv
210.891 123.407 210.745 123.277 210.578 123.1 cv
210.411 122.923 210.276 122.792 210.172 122.709 cv
210.068 122.626 209.943 122.584 209.797 122.584 cv
209.328 122.584 208.912 122.912 208.547 123.568 cv
208.516 123.599 208.484 123.615 208.453 123.615 cv
208.282 123.615 li
f
216.392 120.113 mo
216.392 120.102 216.397 120.092 216.408 120.082 cv
217.205 117.05 li
215.47 117.05 li
215.418 117.05 215.374 117.029 215.338 116.988 cv
215.301 116.946 215.283 116.899 215.283 116.847 cv
215.283 116.795 215.301 116.748 215.338 116.707 cv
215.374 116.665 215.418 116.644 215.47 116.644 cv
217.33 116.644 li
217.736 115.113 li
215.47 115.113 li
215.418 115.113 215.374 115.092 215.338 115.05 cv
215.301 115.009 215.283 114.962 215.283 114.91 cv
215.283 114.858 215.301 114.811 215.338 114.769 cv
215.374 114.728 215.418 114.707 215.47 114.707 cv
217.845 114.707 li
218.689 111.582 li
218.7 111.54 218.723 111.506 218.759 111.48 cv
218.796 111.454 218.835 111.441 218.877 111.441 cv
218.939 111.441 218.988 111.459 219.025 111.496 cv
219.062 111.532 219.08 111.581 219.08 111.644 cv
219.08 111.675 li
218.267 114.707 li
220.142 114.707 li
220.986 111.582 li
220.997 111.54 221.018 111.506 221.049 111.48 cv
221.08 111.454 221.121 111.441 221.174 111.441 cv
221.226 111.441 221.273 111.459 221.314 111.496 cv
221.356 111.532 221.377 111.581 221.377 111.644 cv
221.377 111.675 li
220.549 114.707 li
222.299 114.707 li
222.351 114.707 222.395 114.728 222.431 114.769 cv
222.468 114.811 222.486 114.858 222.486 114.91 cv
222.486 114.962 222.468 115.009 222.431 115.05 cv
222.395 115.092 222.351 115.113 222.299 115.113 cv
220.424 115.113 li
220.033 116.644 li
222.299 116.644 li
222.351 116.644 222.395 116.665 222.431 116.707 cv
222.468 116.748 222.486 116.795 222.486 116.847 cv
222.486 116.899 222.468 116.946 222.431 116.988 cv
222.395 117.029 222.351 117.05 222.299 117.05 cv
219.908 117.05 li
219.08 120.175 li
219.049 120.269 218.981 120.316 218.877 120.316 cv
218.825 120.316 218.778 120.298 218.736 120.261 cv
218.695 120.225 218.674 120.176 218.674 120.113 cv
218.674 120.102 218.679 120.092 218.689 120.082 cv
219.502 117.05 li
217.627 117.05 li
216.799 120.175 li
216.757 120.269 216.689 120.316 216.595 120.316 cv
216.533 120.316 216.484 120.298 216.447 120.261 cv
216.41 120.225 216.392 120.176 216.392 120.113 cv
cp
217.736 116.644 mo
219.627 116.644 li
220.017 115.113 li
218.142 115.113 li
217.736 116.644 li
f
319 174 mo
507 174 li
507 31 li
319 31 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
.5 lw
319 174 mo
319 31 li
1 /0 /CSD get_res sepcs
.127 sep
@
356.6 174 mo
356.6 31 li
@
394.2 174 mo
394.2 31 li
@
431.8 174 mo
431.8 31 li
@
469.4 174 mo
469.4 31 li
@
507 174 mo
507 31 li
@
507 167.5 mo
319 167.5 li
@
507 135 mo
319 135 li
@
507 102.5 mo
319 102.5 li
@
507 70 mo
319 70 li
@
507 37.5 mo
319 37.5 li
@
2 lc
319 174 mo
507 174 li
1 /0 /CSD get_res sepcs
.851 sep
@
319 31 mo
507 31 li
@
319 174 mo
319 172.12 li
@
356.6 174 mo
356.6 172.12 li
@
394.2 174 mo
394.2 172.12 li
@
431.8 174 mo
431.8 172.12 li
@
469.4 174 mo
469.4 172.12 li
@
507 174 mo
507 172.12 li
@
319 31 mo
319 32.88 li
@
356.6 31 mo
356.6 32.88 li
@
394.2 31 mo
394.2 32.88 li
@
431.8 31 mo
431.8 32.88 li
@
469.4 31 mo
469.4 32.88 li
@
507 31 mo
507 32.88 li
@
EIYIBR+Helvetica*1 [10 0 0 -10 0 0 ]msf316 188 mo(0246810)[37.598 37.598 37.598 37.598 34.598 5.56 0 ]xsh400.25 204.143 mo
400.25 203.987 400.266 203.836 400.297 203.69 cv
401.453 199.096 li
399.766 199.096 li
399.661 199.096 399.609 199.028 399.609 198.893 cv
399.651 198.654 399.719 198.534 399.812 198.534 cv
401.594 198.534 li
402.234 195.924 li
402.276 195.789 402.359 195.672 402.484 195.573 cv
402.609 195.474 402.75 195.424 402.906 195.424 cv
403.041 195.424 403.153 195.463 403.242 195.542 cv
403.331 195.62 403.375 195.727 403.375 195.862 cv
403.375 195.893 403.375 195.919 403.375 195.94 cv
403.375 195.961 403.37 195.981 403.359 196.002 cv
402.719 198.534 li
404.375 198.534 li
404.479 198.534 404.531 198.607 404.531 198.752 cv
404.531 198.773 404.523 198.815 404.508 198.877 cv
404.492 198.94 404.471 198.992 404.445 199.034 cv
404.419 199.075 404.38 199.096 404.328 199.096 cv
402.578 199.096 li
401.437 203.721 li
401.354 204.023 401.312 204.283 401.312 204.502 cv
401.312 204.961 401.468 205.19 401.781 205.19 cv
402.25 205.19 402.666 204.971 403.031 204.534 cv
403.396 204.096 403.672 203.612 403.859 203.081 cv
403.901 203.018 403.943 202.987 403.984 202.987 cv
404.187 202.987 li
404.229 202.987 404.263 203.003 404.289 203.034 cv
404.315 203.065 404.328 203.096 404.328 203.127 cv
404.328 203.148 404.323 203.164 404.312 203.174 cv
404.073 203.82 403.729 204.39 403.281 204.885 cv
402.833 205.38 402.323 205.627 401.75 205.627 cv
401.323 205.627 400.966 205.487 400.68 205.206 cv
400.393 204.925 400.25 204.57 400.25 204.143 cv
f
412.252 209.44 mo
412.252 193.44 li
414.439 193.44 li
414.439 194.081 li
412.892 194.081 li
412.892 208.799 li
414.439 208.799 li
414.439 209.44 li
412.252 209.44 li
f
416.196 204.456 mo
416.488 204.945 417.066 205.19 417.931 205.19 cv
418.306 205.19 418.662 205.127 419.001 205.002 cv
419.34 204.877 419.618 204.687 419.837 204.432 cv
420.056 204.177 420.165 203.867 420.165 203.502 cv
420.165 203.221 420.066 202.992 419.868 202.815 cv
419.67 202.638 419.43 202.518 419.149 202.456 cv
418.274 202.284 li
417.879 202.19 417.553 202.008 417.298 201.737 cv
417.043 201.466 416.915 201.138 416.915 200.752 cv
416.915 200.273 417.045 199.852 417.306 199.487 cv
417.566 199.122 417.907 198.844 418.329 198.651 cv
418.751 198.458 419.186 198.362 419.634 198.362 cv
420.123 198.362 420.558 198.479 420.938 198.713 cv
421.319 198.948 421.509 199.289 421.509 199.737 cv
421.509 199.987 421.441 200.206 421.306 200.393 cv
421.17 200.58 420.977 200.674 420.727 200.674 cv
420.592 200.674 420.472 200.627 420.368 200.534 cv
420.264 200.44 420.212 200.325 420.212 200.19 cv
420.212 200.065 420.248 199.942 420.321 199.823 cv
420.394 199.703 420.488 199.609 420.602 199.542 cv
420.717 199.474 420.837 199.44 420.962 199.44 cv
420.868 199.211 420.693 199.044 420.438 198.94 cv
420.183 198.836 419.905 198.784 419.602 198.784 cv
419.331 198.784 419.061 198.839 418.79 198.948 cv
418.519 199.057 418.303 199.216 418.142 199.424 cv
417.98 199.633 417.899 199.883 417.899 200.174 cv
417.899 200.362 417.967 200.529 418.102 200.674 cv
418.238 200.82 418.405 200.924 418.602 200.987 cv
419.524 201.174 li
419.826 201.237 420.1 201.349 420.345 201.51 cv
420.59 201.671 420.785 201.872 420.931 202.112 cv
421.076 202.351 421.149 202.627 421.149 202.94 cv
421.149 203.336 421.037 203.727 420.813 204.112 cv
420.589 204.497 420.316 204.805 419.993 205.034 cv
419.43 205.429 418.738 205.627 417.915 205.627 cv
417.342 205.627 416.819 205.494 416.345 205.229 cv
415.871 204.964 415.634 204.576 415.634 204.065 cv
415.634 203.773 415.72 203.518 415.892 203.299 cv
416.063 203.08 416.295 202.971 416.587 202.971 cv
416.754 202.971 416.897 203.023 417.017 203.127 cv
417.136 203.232 417.196 203.372 417.196 203.549 cv
417.196 203.789 417.105 204 416.923 204.182 cv
416.74 204.365 416.524 204.456 416.274 204.456 cv
416.196 204.456 li
f
422.665 209.44 mo
422.665 208.799 li
424.212 208.799 li
424.212 194.081 li
422.665 194.081 li
422.665 193.44 li
424.852 193.44 li
424.852 209.44 li
422.665 209.44 li
f
319 174 mo
319 31 li
@
507 174 mo
507 31 li
@
319 167.5 mo
320.88 167.5 li
@
319 135 mo
320.88 135 li
@
319 102.5 mo
320.88 102.5 li
@
319 70 mo
320.88 70 li
@
319 37.5 mo
320.88 37.5 li
@
507 167.5 mo
505.12 167.5 li
@
507 135 mo
505.12 135 li
@
507 102.5 mo
505.12 102.5 li
@
507 70 mo
505.12 70 li
@
507 37.5 mo
505.12 37.5 li
@
%ADOBeginSubsetFont: BBAAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EIYIBR+Helvetica gcheck setglobal} if
1 168 17 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>EIYIBR+Helvetica AddT42Char 
1 964 24 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>EIYIBR+Helvetica AddT42Char 
EIYIBR+Helvetica /CharStrings get begin
/period 17 def
/five 24 def
end
EIYIBR+Helvetica /Encoding get
dup 46 /period put
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/EIYIBR+Helvetica*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]EIYIBR+Helvetica nfEIYIBR+Helvetica*1 [10 0 0 -10 0 0 ]msf309 171 mo(0)sh301 138.5 mo(0.5)[5.56 2.78 0 ]xsh309 106 mo(1)sh301 73.5 mo(1.5)[5.56 2.78 0 ]xsh309 41 mo(2)sh296.501 99.646 mo
296.532 99.407 296.6 99.287 296.704 99.287 cv
297.089 99.287 297.394 99.256 297.618 99.193 cv
297.842 99.13 297.985 98.979 298.048 98.74 cv
298.735 96.021 li
298.131 96.625 297.522 96.927 296.907 96.927 cv
296.24 96.927 295.714 96.672 295.329 96.162 cv
294.944 95.651 294.751 95.047 294.751 94.349 cv
294.751 93.672 294.928 92.967 295.282 92.232 cv
295.637 91.498 296.113 90.886 296.712 90.396 cv
297.311 89.907 297.959 89.662 298.657 89.662 cv
298.98 89.662 299.272 89.758 299.532 89.951 cv
299.793 90.144 299.991 90.401 300.126 90.724 cv
300.189 90.599 300.363 90.391 300.649 90.099 cv
300.936 89.808 301.136 89.662 301.251 89.662 cv
301.366 89.662 301.423 89.73 301.423 89.865 cv
299.189 98.802 li
299.158 98.959 299.142 99.053 299.142 99.084 cv
299.142 99.219 299.491 99.287 300.189 99.287 cv
300.241 99.287 300.283 99.308 300.314 99.349 cv
300.345 99.391 300.36 99.438 300.36 99.49 cv
300.319 99.636 300.288 99.732 300.267 99.779 cv
300.246 99.826 300.183 99.849 300.079 99.849 cv
296.657 99.849 li
296.553 99.849 296.501 99.781 296.501 99.646 cv
cp
296.939 96.49 mo
297.314 96.49 297.681 96.349 298.04 96.068 cv
298.399 95.787 298.709 95.448 298.97 95.052 cv
299.876 91.459 li
299.813 91.084 299.675 90.761 299.462 90.49 cv
299.249 90.219 298.97 90.084 298.626 90.084 cv
298.261 90.084 297.925 90.23 297.618 90.521 cv
297.311 90.813 297.048 91.162 296.829 91.568 cv
296.621 91.995 296.423 92.581 296.235 93.326 cv
296.048 94.071 295.954 94.646 295.954 95.052 cv
295.954 95.427 296.032 95.761 296.189 96.052 cv
296.345 96.344 296.595 96.49 296.939 96.49 cv
f
1 lw
0 lc
319 37.5 mo
319.021 37.5 li
341.053 37.5 363.084 37.5 385.116 37.5 cv
385.39 37.5 li
1 /0 /CSD get_res sepcs
.582 sep
@
2 lj
[10 6 ] 0 dsh
319 167.5 mo
319 37.5 li
@
0 lj
[] 0 dsh
319 164.5 mo
319 170.5 li
@
316 167.5 mo
322 167.5 li
@
316.879 165.379 mo
321.121 169.621 li
@
316.879 169.621 mo
321.121 165.379 li
@
319 34.5 mo
319 40.5 li
@
316 37.5 mo
322 37.5 li
@
316.879 35.379 mo
321.121 39.621 li
@
316.879 39.621 mo
321.121 35.379 li
@
1 lj
385.39 102.5 mo
387.27 102.5 li
391.657 102.5 396.043 102.5 400.43 102.5 cv
400.735 102.5 li
@
2 lj
[10 6 ] 0 dsh
385.39 37.5 mo
385.39 102.5 li
@
0 lj
[] 0 dsh
385.39 34.5 mo
385.39 40.5 li
@
382.39 37.5 mo
388.39 37.5 li
@
383.269 35.379 mo
387.511 39.621 li
@
383.269 39.621 mo
387.511 35.379 li
@
385.39 99.5 mo
385.39 105.5 li
@
382.39 102.5 mo
388.39 102.5 li
@
383.269 100.379 mo
387.511 104.621 li
@
383.269 104.621 mo
387.511 100.379 li
@
1 lj
400.735 167.5 mo
400.754 167.5 li
435.797 167.5 470.841 167.5 505.884 167.5 cv
507 167.5 li
@
2 lj
[10 6 ] 0 dsh
400.735 102.5 mo
400.735 167.5 li
@
0 lj
[] 0 dsh
400.735 99.5 mo
400.735 105.5 li
@
397.735 102.5 mo
403.735 102.5 li
@
398.614 100.379 mo
402.856 104.621 li
@
398.614 104.621 mo
402.856 100.379 li
@
400.735 164.5 mo
400.735 170.5 li
@
397.735 167.5 mo
403.735 167.5 li
@
398.614 165.379 mo
402.856 169.621 li
@
398.614 169.621 mo
402.856 165.379 li
@
319 373 mo
507 373 li
507 231 li
319 231 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
.5 lw
1 lj
319 373 mo
319 231 li
1 /0 /CSD get_res sepcs
.127 sep
@
356.6 373 mo
356.6 231 li
@
394.2 373 mo
394.2 231 li
@
431.8 373 mo
431.8 231 li
@
469.4 373 mo
469.4 231 li
@
507 373 mo
507 231 li
@
507 359.027 mo
319 359.027 li
@
507 331.081 mo
319 331.081 li
@
507 303.135 mo
319 303.135 li
@
507 275.189 mo
319 275.189 li
@
507 247.243 mo
319 247.243 li
@
2 lc
319 373 mo
507 373 li
1 /0 /CSD get_res sepcs
.851 sep
@
319 231 mo
507 231 li
@
319 373 mo
319 371.12 li
@
356.6 373 mo
356.6 371.12 li
@
394.2 373 mo
394.2 371.12 li
@
431.8 373 mo
431.8 371.12 li
@
469.4 373 mo
469.4 371.12 li
@
507 373 mo
507 371.12 li
@
319 231 mo
319 232.88 li
@
356.6 231 mo
356.6 232.88 li
@
394.2 231 mo
394.2 232.88 li
@
431.8 231 mo
431.8 232.88 li
@
469.4 231 mo
469.4 232.88 li
@
507 231 mo
507 232.88 li
@
EIYIBR+Helvetica*1 [10 0 0 -10 0 0 ]msf316 387 mo(0246810)[37.598 37.598 37.598 37.598 34.598 5.56 0 ]xsh400.25 403.143 mo
400.25 402.987 400.266 402.836 400.297 402.69 cv
401.453 398.096 li
399.766 398.096 li
399.661 398.096 399.609 398.028 399.609 397.893 cv
399.651 397.654 399.719 397.534 399.812 397.534 cv
401.594 397.534 li
402.234 394.924 li
402.276 394.789 402.359 394.672 402.484 394.573 cv
402.609 394.474 402.75 394.424 402.906 394.424 cv
403.041 394.424 403.153 394.463 403.242 394.542 cv
403.331 394.62 403.375 394.727 403.375 394.862 cv
403.375 394.893 403.375 394.919 403.375 394.94 cv
403.375 394.961 403.37 394.981 403.359 395.002 cv
402.719 397.534 li
404.375 397.534 li
404.479 397.534 404.531 397.607 404.531 397.752 cv
404.531 397.773 404.523 397.815 404.508 397.877 cv
404.492 397.94 404.471 397.992 404.445 398.034 cv
404.419 398.075 404.38 398.096 404.328 398.096 cv
402.578 398.096 li
401.437 402.721 li
401.354 403.023 401.312 403.283 401.312 403.502 cv
401.312 403.961 401.468 404.19 401.781 404.19 cv
402.25 404.19 402.666 403.971 403.031 403.534 cv
403.396 403.096 403.672 402.612 403.859 402.081 cv
403.901 402.018 403.943 401.987 403.984 401.987 cv
404.187 401.987 li
404.229 401.987 404.263 402.003 404.289 402.034 cv
404.315 402.065 404.328 402.096 404.328 402.127 cv
404.328 402.148 404.323 402.164 404.312 402.174 cv
404.073 402.82 403.729 403.39 403.281 403.885 cv
402.833 404.38 402.323 404.627 401.75 404.627 cv
401.323 404.627 400.966 404.487 400.68 404.206 cv
400.393 403.925 400.25 403.57 400.25 403.143 cv
f
412.252 408.44 mo
412.252 392.44 li
414.439 392.44 li
414.439 393.081 li
412.892 393.081 li
412.892 407.799 li
414.439 407.799 li
414.439 408.44 li
412.252 408.44 li
f
416.196 403.456 mo
416.488 403.945 417.066 404.19 417.931 404.19 cv
418.306 404.19 418.662 404.127 419.001 404.002 cv
419.34 403.877 419.618 403.687 419.837 403.432 cv
420.056 403.177 420.165 402.867 420.165 402.502 cv
420.165 402.221 420.066 401.992 419.868 401.815 cv
419.67 401.638 419.43 401.518 419.149 401.456 cv
418.274 401.284 li
417.879 401.19 417.553 401.008 417.298 400.737 cv
417.043 400.466 416.915 400.138 416.915 399.752 cv
416.915 399.273 417.045 398.852 417.306 398.487 cv
417.566 398.122 417.907 397.844 418.329 397.651 cv
418.751 397.458 419.186 397.362 419.634 397.362 cv
420.123 397.362 420.558 397.479 420.938 397.713 cv
421.319 397.948 421.509 398.289 421.509 398.737 cv
421.509 398.987 421.441 399.206 421.306 399.393 cv
421.17 399.58 420.977 399.674 420.727 399.674 cv
420.592 399.674 420.472 399.627 420.368 399.534 cv
420.264 399.44 420.212 399.325 420.212 399.19 cv
420.212 399.065 420.248 398.942 420.321 398.823 cv
420.394 398.703 420.488 398.609 420.602 398.542 cv
420.717 398.474 420.837 398.44 420.962 398.44 cv
420.868 398.211 420.693 398.044 420.438 397.94 cv
420.183 397.836 419.905 397.784 419.602 397.784 cv
419.331 397.784 419.061 397.839 418.79 397.948 cv
418.519 398.057 418.303 398.216 418.142 398.424 cv
417.98 398.633 417.899 398.883 417.899 399.174 cv
417.899 399.362 417.967 399.529 418.102 399.674 cv
418.238 399.82 418.405 399.924 418.602 399.987 cv
419.524 400.174 li
419.826 400.237 420.1 400.349 420.345 400.51 cv
420.59 400.671 420.785 400.872 420.931 401.112 cv
421.076 401.351 421.149 401.627 421.149 401.94 cv
421.149 402.336 421.037 402.727 420.813 403.112 cv
420.589 403.497 420.316 403.805 419.993 404.034 cv
419.43 404.429 418.738 404.627 417.915 404.627 cv
417.342 404.627 416.819 404.494 416.345 404.229 cv
415.871 403.964 415.634 403.576 415.634 403.065 cv
415.634 402.773 415.72 402.518 415.892 402.299 cv
416.063 402.08 416.295 401.971 416.587 401.971 cv
416.754 401.971 416.897 402.023 417.017 402.127 cv
417.136 402.232 417.196 402.372 417.196 402.549 cv
417.196 402.789 417.105 403 416.923 403.182 cv
416.74 403.365 416.524 403.456 416.274 403.456 cv
416.196 403.456 li
f
422.665 408.44 mo
422.665 407.799 li
424.212 407.799 li
424.212 393.081 li
422.665 393.081 li
422.665 392.44 li
424.852 392.44 li
424.852 408.44 li
422.665 408.44 li
f
319 373 mo
319 231 li
@
507 373 mo
507 231 li
@
319 359.027 mo
320.88 359.027 li
@
319 331.081 mo
320.88 331.081 li
@
319 303.135 mo
320.88 303.135 li
@
319 275.189 mo
320.88 275.189 li
@
319 247.243 mo
320.88 247.243 li
@
507 359.027 mo
505.12 359.027 li
@
507 331.081 mo
505.12 331.081 li
@
507 303.135 mo
505.12 303.135 li
@
507 275.189 mo
505.12 275.189 li
@
507 247.243 mo
505.12 247.243 li
@
EIYIBR+Helvetica*1 [10 0 0 -10 0 0 ]msf309 362.527 mo(0)sh301 334.577 mo(0.2)[5.56 2.78 0 ]xsh301 306.627 mo(0.4)[5.56 2.78 0 ]xsh301 278.677 mo(0.6)[5.56 2.78 0 ]xsh301 250.727 mo(0.8)[5.56 2.78 0 ]xsh296.097 295.99 mo
296.097 295.917 296.102 295.86 296.113 295.818 cv
297.8 290.334 li
296.347 290.334 li
295.962 290.334 295.6 290.456 295.261 290.701 cv
294.922 290.946 294.639 291.256 294.41 291.631 cv
294.389 291.672 294.357 291.693 294.316 291.693 cv
294.128 291.693 li
294.035 291.693 293.988 291.641 293.988 291.537 cv
293.988 291.516 293.998 291.485 294.019 291.443 cv
294.363 290.849 294.735 290.349 295.136 289.943 cv
295.537 289.537 295.988 289.334 296.488 289.334 cv
301.394 289.334 li
301.509 289.334 301.605 289.373 301.683 289.451 cv
301.761 289.529 301.8 289.625 301.8 289.74 cv
301.8 289.896 301.743 290.034 301.628 290.154 cv
301.514 290.274 301.379 290.334 301.222 290.334 cv
298.316 290.334 li
297.253 295.849 li
297.212 296.026 297.134 296.172 297.019 296.287 cv
296.904 296.402 296.759 296.459 296.582 296.459 cv
296.446 296.459 296.331 296.415 296.238 296.326 cv
296.144 296.237 296.097 296.125 296.097 295.99 cv
f
1 lw
0 lc
319 359.027 mo
319.021 359.027 li
341.053 359.027 363.084 359.027 385.116 359.027 cv
385.39 359.027 li
1 /0 /CSD get_res sepcs
.582 sep
@
2 lj
[10 6 ] 0 dsh
319 359.027 mo
319 359.027 li
@
0 lj
[] 0 dsh
319 356.027 mo
319 362.027 li
@
316 359.027 mo
322 359.027 li
@
316.879 356.906 mo
321.121 361.148 li
@
316.879 361.148 mo
321.121 356.906 li
@
319 356.027 mo
319 362.027 li
@
316 359.027 mo
322 359.027 li
@
316.879 356.906 mo
321.121 361.148 li
@
316.879 361.148 mo
321.121 356.906 li
@
1 lj
385.39 359.027 mo
387.27 345.054 li
391.657 312.45 396.043 279.847 400.43 247.243 cv
400.735 244.973 li
@
2 lj
[10 6 ] 0 dsh
385.39 359.027 mo
385.39 359.027 li
@
0 lj
[] 0 dsh
385.39 356.027 mo
385.39 362.027 li
@
382.39 359.027 mo
388.39 359.027 li
@
383.269 356.906 mo
387.511 361.148 li
@
383.269 361.148 mo
387.511 356.906 li
@
385.39 356.027 mo
385.39 362.027 li
@
382.39 359.027 mo
388.39 359.027 li
@
383.269 356.906 mo
387.511 361.148 li
@
383.269 361.148 mo
387.511 356.906 li
@
1 lj
400.735 359.027 mo
400.754 359.027 li
435.797 359.027 470.841 359.027 505.884 359.027 cv
507 359.027 li
@
2 lj
[10 6 ] 0 dsh
400.735 244.973 mo
400.735 359.027 li
@
0 lj
[] 0 dsh
400.735 241.973 mo
400.735 247.973 li
@
397.735 244.973 mo
403.735 244.973 li
@
398.614 242.852 mo
402.856 247.094 li
@
398.614 247.094 mo
402.856 242.852 li
@
400.735 356.027 mo
400.735 362.027 li
@
397.735 359.027 mo
403.735 359.027 li
@
398.614 356.906 mo
402.856 361.148 li
@
398.614 361.148 mo
402.856 356.906 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/EIYIBR+Helvetica*1 uf/EIYIBR+Helvetica uf/BBAAAA+Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
